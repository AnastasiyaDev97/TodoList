{"version":3,"sources":["App.module.css","components/AddItemForm/AddItemForm.module.css","components/Task/Task.module.css","components/Button/Button.module.css","enums/index.ts","state/reducers/app-reducer.ts","components/Snackbar/Snackbar.tsx","api/apiConfig.ts","api/todolist-api.ts","utils/error-utils.ts","constants/index.ts","state/reducers/auth-reducer.ts","components/Login/Login.tsx","utils/validates.ts","state/reducers/todolistReducer/todolist-reducer.ts","api/tasks-api.ts","state/reducers/taskReducer/tasks-reducer.ts","state/reducers/taskReducer/thunk.ts","state/reducers/todolistReducer/thunk.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Button/Button.tsx","components/Todolist/Todolist.tsx","components/TodolistList/TodolistList.tsx","App.tsx","state/store.ts","index.tsx"],"names":["module","exports","TaskPriorities","TaskStatuses","URL_String","Path","FilterValue","RequestStatusType","ResultCodes","initialState","status","Idle","error","isInitialize","slice","createSlice","name","reducers","toggleIsInitialize","state","action","payload","value","setRequestStatus","setErrorText","actions","appReducer","reducer","Alert","React","forwardRef","props","ref","elevation","variant","useStyles","makeStyles","theme","root","width","marginTop","spacing","ErrorSnackbar","useSelector","app","classes","dispatch","useDispatch","handleClose","event","reason","className","Snackbar","open","autoHideDuration","onClose","severity","instance","axios","create","baseURL","withCredentials","headers","Todolists","Login","Me","todolistAPI","get","res","data","title","post","todolistId","delete","put","authAPI","loginParams","email","password","rememberMe","captcha","Failed","catchErrorHandler","err","message","errorHandler","messages","Loading","Succeeded","success","isLoggedIn","id","login","setIsLoggedInAC","setAuthUserData","authReducer","auth","START","formik","useFormik","initialValues","process","REACT_APP_LOGIN","REACT_APP_PASSWORD","validate","values","errors","test","length","validates","onSubmit","resetForm","a","dataResponse","resultCode","touched","textFields","touch","type","to","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","rel","target","FormGroup","map","TextField","label","margin","getFieldProps","style","color","FormControlLabel","checked","control","Checkbox","Button","All","removeTodolistAC","index","findIndex","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","newFilter","setTodolistsAC","todolists","tdl","setTodolistProgressStatus","todolistsReducer","Tasks","tasksAPI","taskId","updateTask","description","priority","startDate","deadline","removeTaskAC","tl","addTaskAC","task","updateTaskAC","todoListId","t","setTasksAC","tasks","extraReducers","builder","addCase","forEach","f","tasksReducer","updateTaskTC","updateElemInTask","getState","currTask","find","updateTaskForAPI","AddItemForm","memo","addItem","useState","setTitle","setError","addTaskHandler","trim","s","wrapper","onChange","e","currentTarget","onKeyPress","key","size","IconButton","onClick","AddBoxOutlined","EditableSpan","updateTitle","edit","setEdit","currTitle","setCurrTitle","onDoubleClick","onBlur","autoFocus","Task","taskTitle","Completed","New","handleUpdateTaskTitleSpan","useCallback","newTitle","completedTask","deleteTaskTC","Delete","fontSize","newIsDoneValue","UniversalButton","callback","btn","Todolist","todolistTitle","CompletedFilter","Active","onChangeAllFilterButton","onChangeCompletedFilterButton","onChangeActiveFilterButton","handleAddTaskForm","addTaskTC","handleUpdateTodoTitleSpan","updateTodoTitleTC","buttonsArr","filteredTasks","removeTodoTC","disabled","TodolistList","LOGIN_PATH","useEffect","todo","items","addTodolist","padding","tasksForTodolist","Paper","AppWithRedux","NOT_FOUND","ANY","logoutHandler","AppBar","position","background","appbar","Toolbar","header","Typography","float","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.d2103c2f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appbar\":\"App_appbar__1QaGQ\",\"header\":\"App_header__5RBuX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"AddItemForm_error__3At2_\",\"wrapper\":\"AddItemForm_wrapper__1Z66Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedTask\":\"Task_completedTask__1qx3H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__CT9Ov\"};","export enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum URL_String {\r\n  Todolists = \"todo-lists\",\r\n  Tasks = \"tasks\",\r\n  Login = \"auth/login\",\r\n  Me = \"auth/me\",\r\n}\r\n\r\nexport enum Path {\r\n  START = \"/\",\r\n  LOGIN_PATH = \"/login\",\r\n  NOT_FOUND = \"/404\",\r\n  ANY = \"*\",\r\n}\r\n\r\nexport enum FilterValue {\r\n  All = \"all\",\r\n  CompletedFilter = \"completed\",\r\n  Active = \"active\",\r\n}\r\n\r\nexport enum RequestStatusType {\r\n  Idle = \"idle\",\r\n  Loading = \"loading\",\r\n  Succeeded = \"succeeded\",\r\n  Failed = \"failed\",\r\n}\r\n\r\nexport enum ResultCodes {\r\n  success = 0,\r\n  error = 1,\r\n  captcha = 10,\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Nullable } from \"type/Nullable\";\r\nimport { RequestStatusType } from \"enums/index\";\r\n\r\nconst { Idle } = RequestStatusType;\r\n\r\nconst initialState = {\r\n  status: Idle,\r\n  error: null as Nullable<string>,\r\n  isInitialize: false,\r\n};\r\nexport type appInitialStateType = {\r\n  status: RequestStatusType;\r\n  error: Nullable<string>;\r\n  isInitialize: boolean;\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"app\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    toggleIsInitialize(state, action: PayloadAction<{ value: boolean }>) {\r\n      state.isInitialize = action.payload.value;\r\n    },\r\n\r\n    setRequestStatus(\r\n      state,\r\n      action: PayloadAction<{ status: RequestStatusType }>\r\n    ) {\r\n      state.status = action.payload.status;\r\n    },\r\n\r\n    setErrorText(state, action: PayloadAction<{ error: Nullable<string> }>) {\r\n      state.error = action.payload.error;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setRequestStatus, toggleIsInitialize, setErrorText } =\r\n  slice.actions;\r\nexport const appReducer = slice.reducer;\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"../../state/store\";\r\nimport { setErrorText } from \"../../state/reducers/app-reducer\";\r\nimport { Nullable } from \"../../type/Nullable\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function ErrorSnackbar() {\r\n    \r\n  const error = useSelector<RootReducerType, Nullable<string>>(\r\n    (state) => state.app.error\r\n  );\r\n\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setErrorText({ error: null }));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error} &#128557;\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL:\r\n    \"https://social-network.samuraijs.com/api/1.1/\" /*  process.env.REACT_APP_BASE_URL */,\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\":\r\n      \"78ba9efb-88a6-4c7f-b505-5ad3ba5a9466\" /* process.env.REACT_APP_API_KEY || EMPTY_STRING */,\r\n  },\r\n});\r\n","import { instance } from \"./apiConfig\";\r\nimport {\r\n  AuthUserDataType,\r\n  loginParamsType,\r\n  ResponseT,\r\n  TodolistResponseType,\r\n} from \"./types\";\r\nimport { URL_String } from \"enums/index\";\r\nconst { Todolists, Login, Me } = URL_String;\r\n\r\nexport const todolistAPI = {\r\n  async GetTodolists() {\r\n    const res = await instance.get<Array<TodolistResponseType>>(Todolists);\r\n    return res.data;\r\n  },\r\n\r\n  async CreateTodolist(\r\n    title: string\r\n  ): Promise<ResponseT<{ item: TodolistResponseType }>> {\r\n    const res = await instance.post<ResponseT<{ item: TodolistResponseType }>>(\r\n      Todolists,\r\n      { title }\r\n    );\r\n    return res.data;\r\n  },\r\n\r\n  async DeleteTodolist(todolistId: string) {\r\n    const res = await instance.delete<ResponseT>(`${Todolists}/${todolistId}`);\r\n    return res.data;\r\n  },\r\n\r\n  async UpdateTodolistTitle(todolistId: string, title: string) {\r\n    const res = await instance.put<ResponseT>(`${Todolists}/${todolistId}`, {\r\n      title,\r\n    });\r\n    return res.data;\r\n  },\r\n};\r\n\r\nexport const authAPI = {\r\n  async login(loginParams: loginParamsType) {\r\n    let { email, password, rememberMe, captcha } = loginParams;\r\n    const res = await instance.post<ResponseT<{ userId: number }>>(Login, {\r\n      email,\r\n      password,\r\n      rememberMe,\r\n      captcha,\r\n    });\r\n    return res.data;\r\n  },\r\n\r\n  async logout() {\r\n    const res = await instance.delete<ResponseT>(Login);\r\n    return res.data;\r\n  },\r\n\r\n  async getAuthData() {\r\n    const res = await instance.get<ResponseT<AuthUserDataType>>(Me);\r\n    return res.data;\r\n  },\r\n};\r\n","import { setErrorText, setRequestStatus } from \"state/reducers/app-reducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ResponseT } from \"api/types\";\r\nimport { RequestStatusType } from \"enums\";\r\nimport { setErrorTextType, setRequestStatusType } from \"state/reducers/types\";\r\nimport { FIRST_INDEX, SOME_ERROR } from \"constants/index\";\r\n\r\nconst { Failed } = RequestStatusType;\r\n\r\nexport const catchErrorHandler = (\r\n  dispatch: ErrorUtilsDispatchType,\r\n  err: any\r\n) => {\r\n  dispatch(setErrorText({ error: err.message }));\r\n  dispatch(setRequestStatus({ status: Failed }));\r\n};\r\n\r\nexport const errorHandler = <T>(\r\n  dispatch: ErrorUtilsDispatchType,\r\n  data: ResponseT<T>\r\n) => {\r\n  const { messages } = data;\r\n  if (messages) {\r\n    dispatch(setErrorText({ error: messages[FIRST_INDEX] }));\r\n  } else {\r\n    dispatch(setErrorText({ error: SOME_ERROR }));\r\n  }\r\n  dispatch(setRequestStatus({ status: Failed }));\r\n};\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setErrorTextType | setRequestStatusType>;\r\n","export const EMPTY_STRING = \"\";\r\nexport const PAGE_NOT_FOUND_TEXT = \"404: Page not found\";\r\nexport const FIRST_INDEX = 0;\r\nexport const SOME_ERROR = \"Some error occurred\";\r\nexport const LINK_TO_REGISTER = \"https://social-network.samuraijs.com/\";\r\n","import { Dispatch } from \"redux\";\r\nimport { setRequestStatus, toggleIsInitialize } from \"./app-reducer\";\r\nimport { authAPI } from \"api/todolist-api\";\r\nimport { catchErrorHandler, errorHandler } from \"utils/error-utils\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Nullable } from \"type/Nullable\";\r\nimport { RequestStatusType, ResultCodes } from \"enums\";\r\nimport { AuthUserDataType, loginParamsType } from \"api/types\";\r\n\r\nconst { Loading, Succeeded } = RequestStatusType;\r\nconst { success } = ResultCodes;\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  data: {\r\n    id: null as Nullable<number>,\r\n    login: null as Nullable<string>,\r\n    email: null as Nullable<string>,\r\n  },\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"auth\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n      state.isLoggedIn = action.payload.value;\r\n    },\r\n    setAuthUserData(state, action: PayloadAction<{ data: AuthUserDataType }>) {\r\n      state.data = action.payload.data;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setIsLoggedInAC, setAuthUserData } = slice.actions;\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const loginTC =\r\n  (data: loginParamsType) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let dataResponse = await authAPI.login(data);\r\n      if (dataResponse.resultCode === success) {\r\n        dispatch(setIsLoggedInAC({ value: true }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, dataResponse);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await authAPI.logout();\r\n    if (data.resultCode === success) {\r\n      dispatch(setIsLoggedInAC({ value: false }));\r\n      dispatch(setRequestStatus({ status: Succeeded }));\r\n    } else {\r\n      errorHandler(dispatch, data);\r\n    }\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  }\r\n};\r\n\r\nexport const authUserTC = () => async (dispatch: Dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await authAPI.getAuthData();\r\n    if (data.resultCode === success) {\r\n      dispatch(setIsLoggedInAC({ value: true }));\r\n    }\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  } finally {\r\n    dispatch(toggleIsInitialize({ value: true }));\r\n    dispatch(setRequestStatus({ status: Succeeded }));\r\n  }\r\n};\r\n","import Grid from \"@material-ui/core/Grid/Grid\";\r\n\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useFormik } from \"formik\";\r\nimport { loginTC } from \"state/reducers/auth-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"state/store\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Path } from \"enums\";\r\nimport { LINK_TO_REGISTER } from \"constants/index\";\r\nimport { validates, FormikErrorType } from \"utils/validates\";\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoggedIn = useSelector<RootReducerType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n\r\n  const { START } = Path;\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: process.env.REACT_APP_LOGIN as string,\r\n      password: process.env.REACT_APP_PASSWORD as string,\r\n      rememberMe: false,\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      validates(values, errors);\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      formik.resetForm();\r\n      dispatch(loginTC(values));\r\n    },\r\n  });\r\n\r\n  const { touched } = formik;\r\n  const { password, email } = formik.errors;\r\n  const textFields = [\r\n    { name: \"email\", err: email, touch: touched.email, type: \"text\" },\r\n    {\r\n      name: \"password\",\r\n      err: password,\r\n      touch: touched.password,\r\n      type: \"password\",\r\n    },\r\n  ];\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to={START} />;\r\n  }\r\n  return (\r\n    <Grid container justifyContent={\"center\"}>\r\n      <Grid item justifyContent={\"center\"}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered\r\n                <a href={LINK_TO_REGISTER} rel=\"noreferrer\" target={\"_blank\"}>\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n\r\n            <FormGroup>\r\n              {textFields.map(({ name, touch, err, type }) => (\r\n                <>\r\n                  <TextField\r\n                    key={name}\r\n                    label={name}\r\n                    margin=\"normal\"\r\n                    type={type}\r\n                    {...formik.getFieldProps({ name })}\r\n                  />\r\n                  {touch && err && <div style={{ color: \"red\" }}>{err}</div>}\r\n                </>\r\n              ))}\r\n\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                checked={formik.values.rememberMe}\r\n                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\r\n              />\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","export const validates = (\r\n  values: FormikValuesType,\r\n  errors: FormikErrorType\r\n) => {\r\n  const { email, password } = values;\r\n  if (!email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n    errors.email = \"Invalid email address\";\r\n  }\r\n  if (!password) {\r\n    errors.password = \"Required\";\r\n  }\r\n  if (password?.length < 3) {\r\n    errors.password = \"Min password length is 3 symbols\";\r\n  }\r\n};\r\n\r\nexport type FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n};\r\n\r\ntype FormikValuesType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { TodolistResponseType } from \"api/types\";\r\nimport { FilterValue, RequestStatusType } from \"enums\";\r\nimport { todolistStateType } from \"./types\";\r\n\r\nconst { Idle } = RequestStatusType;\r\nconst { All } = FilterValue;\r\n\r\nlet initialState: todolistStateType = [];\r\n\r\nconst slice = createSlice({\r\n  name: \"todolists\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n      let index = state.findIndex(({ id }) => id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.splice(index, 1);\r\n      }\r\n    },\r\n\r\n    addTodolistAC(\r\n      state,\r\n      action: PayloadAction<{ todolist: TodolistResponseType }>\r\n    ) {\r\n      state.unshift({\r\n        ...action.payload.todolist,\r\n        filter: All,\r\n        entityStatus: Idle,\r\n      });\r\n    },\r\n\r\n    changeTodolistTitleAC(\r\n      state,\r\n      action: PayloadAction<{ id: string; title: string }>\r\n    ) {\r\n      let index = state.findIndex(({ id }) => id === action.payload.id);\r\n      state[index].title = action.payload.title;\r\n    },\r\n\r\n    changeTodolistFilterAC(\r\n      state,\r\n      action: PayloadAction<{ id: string; newFilter: FilterValue }>\r\n    ) {\r\n      let index = state.findIndex(({ id }) => id === action.payload.id);\r\n      state[index] = { ...state[index], filter: action.payload.newFilter };\r\n    },\r\n\r\n    setTodolistsAC(\r\n      state,\r\n      action: PayloadAction<{ todolists: Array<TodolistResponseType> }>\r\n    ) {\r\n      return action.payload.todolists.map((tdl) => ({\r\n        ...tdl,\r\n        filter: All,\r\n        entityStatus: Idle,\r\n      }));\r\n    },\r\n\r\n    setTodolistProgressStatus(\r\n      state,\r\n      action: PayloadAction<{\r\n        entityStatus: RequestStatusType;\r\n        todolistId: string;\r\n      }>\r\n    ) {\r\n      let index = state.findIndex(({ id }) => id === action.payload.todolistId);\r\n      state[index] = {\r\n        ...state[index],\r\n        entityStatus: action.payload.entityStatus,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  removeTodolistAC,\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  changeTodolistFilterAC,\r\n  setTodolistsAC,\r\n  setTodolistProgressStatus,\r\n} = slice.actions;\r\n\r\nexport const todolistsReducer = slice.reducer;\r\n","import { instance } from \"./apiConfig\";\r\nimport {\r\n  GetTasksResponseType,\r\n  ResponseT,\r\n  TaskResponseType,\r\n  updateTaskType,\r\n} from \"./types\";\r\nimport { URL_String } from \"enums/index\";\r\nconst { Todolists, Tasks } = URL_String;\r\n\r\nexport const tasksAPI = {\r\n  async GetTasks(todolistId: string) {\r\n    const res = await instance.get<GetTasksResponseType>(\r\n      `${Todolists}/${todolistId}/${Tasks}`\r\n    );\r\n    return res.data;\r\n  },\r\n  async CreateTask(todolistId: string, title: string) {\r\n    const res = await instance.post<ResponseT<{ item: TaskResponseType }>>(\r\n      `${Todolists}/${todolistId}/${Tasks}`,\r\n      { title }\r\n    );\r\n    return res.data;\r\n  },\r\n  async DeleteTask(todolistId: string, taskId: string) {\r\n    const res = await instance.delete<ResponseT>(\r\n      `${Todolists}/${todolistId}/${Tasks}/${taskId}`\r\n    );\r\n    return res.data;\r\n  },\r\n\r\n  async UpdateTask(\r\n    todolistId: string,\r\n    taskId: string,\r\n    updateTask: updateTaskType\r\n  ) {\r\n    let { title, description, status, priority, startDate, deadline } =\r\n      updateTask;\r\n    const res = await instance.put<ResponseT<{ item: TaskResponseType }>>(\r\n      `${Todolists}/${todolistId}/${Tasks}/${taskId}`,\r\n      {\r\n        title,\r\n        description,\r\n        status,\r\n        priority,\r\n        startDate,\r\n        deadline,\r\n      }\r\n    );\r\n    return res.data;\r\n  },\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addTodolistAC,\r\n  removeTodolistAC,\r\n  setTodolistsAC,\r\n} from \"../todolistReducer/todolist-reducer\";\r\nimport { TaskResponseType } from \"api/types\";\r\nimport { tasksType } from \"./types\";\r\n\r\nlet initialState: tasksType = {};\r\n\r\nconst slice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTaskAC(state, action: PayloadAction<{ taskId: string; id: string }>) {\r\n      let index = state[action.payload.id].findIndex(\r\n        (tl) => tl.id === action.payload.taskId\r\n      );\r\n      if (index !== -1) {\r\n        state[action.payload.id].splice(index, 1); //с какого индекса, сколько эл-ов\r\n      }\r\n    },\r\n\r\n    addTaskAC(\r\n      state,\r\n      action: PayloadAction<{ task: TaskResponseType; id: string }>\r\n    ) {\r\n      state[action.payload.id].unshift(action.payload.task);\r\n    },\r\n\r\n    updateTaskAC(\r\n      state,\r\n      action: PayloadAction<{ task: TaskResponseType; taskId: string }>\r\n    ) {\r\n      let index = state[action.payload.task.todoListId].findIndex(\r\n        (t) => t.id === action.payload.taskId\r\n      );\r\n      state[action.payload.task.todoListId][index] = {\r\n        ...state[action.payload.task.todoListId][index],\r\n        ...action.payload.task,\r\n      };\r\n    },\r\n\r\n    setTasksAC(\r\n      state,\r\n      action: PayloadAction<{\r\n        tasks: Array<TaskResponseType>;\r\n        todolistId: string;\r\n      }>\r\n    ) {\r\n      state[action.payload.todolistId] = action.payload.tasks;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n      state[action.payload.todolist.id] = [];\r\n    });\r\n\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n      action.payload.todolists.forEach((f) => {\r\n        state[f.id] = [];\r\n      });\r\n    });\r\n\r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n      delete state[action.payload.id];\r\n    });\r\n  },\r\n});\r\n\r\nexport const { removeTaskAC, addTaskAC, updateTaskAC, setTasksAC } =\r\n  slice.actions;\r\nexport const tasksReducer = slice.reducer;\r\n","import { RequestStatusType, ResultCodes } from \"enums\";\r\nimport { tasksAPI } from \"api/tasks-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RootReducerType } from \"state/store\";\r\nimport { setRequestStatus } from \"../app-reducer\";\r\nimport { catchErrorHandler, errorHandler } from \"utils/error-utils\";\r\nimport {\r\n  addTaskAC,\r\n  removeTaskAC,\r\n  setTasksAC,\r\n  updateTaskAC,\r\n} from \"./tasks-reducer\";\r\nimport { updateElemInTaskType } from \"./types\";\r\nimport { updateTaskType } from \"api/types\";\r\n\r\nconst { Succeeded, Loading } = RequestStatusType;\r\nconst { success } = ResultCodes;\r\n\r\nexport const getTasksTC =\r\n  (todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let data = await tasksAPI.GetTasks(todolistId);\r\n      dispatch(setTasksAC({ tasks: data.items, todolistId }));\r\n      dispatch(setRequestStatus({ status: Succeeded }));\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const deleteTaskTC =\r\n  (todolistId: string, taskId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let data = await tasksAPI.DeleteTask(todolistId, taskId);\r\n      if (data.resultCode === success) {\r\n        dispatch(removeTaskAC({ taskId, id: todolistId }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const addTaskTC =\r\n  (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let data = await tasksAPI.CreateTask(todolistId, title);\r\n      if (data.resultCode === success) {\r\n        let task = data.data.item;\r\n        dispatch(addTaskAC({ task, id: todolistId }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const updateTaskTC =\r\n  (\r\n    todolistId: string,\r\n    taskId: string,\r\n    updateElemInTask: updateElemInTaskType\r\n  ) =>\r\n  async (dispatch: Dispatch, getState: () => RootReducerType) => {\r\n    let tasks = getState().tasks;\r\n    let currTask = tasks[todolistId].find(({ id }) => id === taskId);\r\n    try {\r\n      if (currTask) {\r\n        let updateTask: updateTaskType = currTask;\r\n        let updateTaskForAPI = { ...updateTask, ...updateElemInTask };\r\n        dispatch(setRequestStatus({ status: Loading }));\r\n        let data = await tasksAPI.UpdateTask(\r\n          todolistId,\r\n          taskId,\r\n          updateTaskForAPI\r\n        );\r\n        if (data.resultCode === success) {\r\n          let task = data.data.item;\r\n          dispatch(updateTaskAC({ task, taskId }));\r\n          dispatch(setRequestStatus({ status: Succeeded }));\r\n        } else {\r\n          errorHandler(dispatch, data);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n","import { catchErrorHandler, errorHandler } from \"utils/error-utils\";\r\nimport { RequestStatusType, ResultCodes } from \"enums\";\r\nimport { Dispatch } from \"redux\";\r\nimport { todolistAPI } from \"api/todolist-api\";\r\nimport { setRequestStatus } from \"../app-reducer\";\r\nimport {\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  removeTodolistAC,\r\n  setTodolistProgressStatus,\r\n  setTodolistsAC,\r\n} from \"./todolist-reducer\";\r\nimport { getTasksTC } from \"../taskReducer/thunk\";\r\nimport { ThunkType } from \"state/store\";\r\n\r\nconst { Loading, Succeeded, Failed } = RequestStatusType;\r\nconst { success } = ResultCodes;\r\n\r\nexport const setTodosTC = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await todolistAPI.GetTodolists();\r\n    dispatch(setTodolistsAC({ todolists: data }));\r\n    dispatch(setRequestStatus({ status: Succeeded }));\r\n    data.forEach((todo) => dispatch(getTasksTC(todo.id)));\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  }\r\n};\r\n\r\nexport const removeTodoTC =\r\n  (todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      dispatch(\r\n        setTodolistProgressStatus({ entityStatus: Loading, todolistId })\r\n      );\r\n      let data = await todolistAPI.DeleteTodolist(todolistId);\r\n      if (data.resultCode === success) {\r\n        dispatch(removeTodolistAC({ id: todolistId }));\r\n        dispatch(\r\n          setTodolistProgressStatus({ entityStatus: Succeeded, todolistId })\r\n        );\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n        dispatch(\r\n          setTodolistProgressStatus({ entityStatus: Failed, todolistId })\r\n        );\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const addTodoTC = (title: string) => async (dispatch: Dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await todolistAPI.CreateTodolist(title);\r\n    if (data.resultCode === success) {\r\n      dispatch(addTodolistAC({ todolist: data.data.item }));\r\n      dispatch(setRequestStatus({ status: Succeeded }));\r\n    } else {\r\n      errorHandler(dispatch, data);\r\n    }\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  }\r\n};\r\n\r\nexport const updateTodoTitleTC =\r\n  (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      const data = await todolistAPI.UpdateTodolistTitle(todolistId, title);\r\n\r\n      if (data.resultCode === success) {\r\n        dispatch(changeTodolistTitleAC({ id: todolistId, title }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n","import s from \"./AddItemForm.module.css\";\r\nimport { ChangeEvent, KeyboardEvent, useState, FC, memo } from \"react\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport { AddBoxOutlined } from \"@material-ui/icons\";\r\nimport { EMPTY_STRING } from \"constants/index\";\r\nimport { Nullable } from \"type/Nullable\";\r\n\r\ntype addItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n};\r\n\r\nexport const AddItemForm: FC<addItemFormPropsType> = memo(({ addItem }) => {\r\n  let [title, setTitle] = useState<string>(EMPTY_STRING);\r\n  let [error, setError] = useState<Nullable<string>>(null);\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n    if (e.currentTarget.value.length > 0) {\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  const addTaskHandler = () => {\r\n    if (title.trim() !== EMPTY_STRING) {\r\n      addItem(title);\r\n      setTitle(EMPTY_STRING);\r\n    } else {\r\n      setError(\"name required\");\r\n    }\r\n  };\r\n\r\n  const onKeyPressAddTaskHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      addTaskHandler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <TextField\r\n        error={!!error}\r\n        id={error ? \"outlined-error\" : \"standard-basic\"}\r\n        label={error ? \"Error\" : \"write title\"}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressAddTaskHandler}\r\n        value={title}\r\n        size=\"small\"\r\n      />\r\n\r\n      <IconButton size=\"small\" onClick={addTaskHandler}>\r\n        <AddBoxOutlined style={{ color: \"LightGreen\" }} />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import TextField from \"@material-ui/core/TextField/TextField\";\r\nimport { ChangeEvent, useState, FC, memo } from \"react\";\r\n\r\ntype editableSpanPropsType = {\r\n  title: string;\r\n  updateTitle: (newTitle: string) => void;\r\n};\r\n\r\nexport const EditableSpan: FC<editableSpanPropsType> = memo(\r\n  ({ title, updateTitle }) => {\r\n\r\n    let [edit, setEdit] = useState(true);\r\n    let [currTitle, setCurrTitle] = useState(title);\r\n\r\n    const activateInputMode = () => {\r\n      setEdit(false);\r\n    };\r\n\r\n    const activateSpanMode = () => {\r\n      setEdit(true);\r\n      updateTitle(currTitle);\r\n    };\r\n\r\n    const updateTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setCurrTitle(e.currentTarget.value);\r\n    };\r\n    \r\n    return edit ? (\r\n      <span onDoubleClick={activateInputMode}>{title}</span>\r\n    ) : (\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        variant=\"standard\"\r\n        value={currTitle}\r\n        onBlur={activateSpanMode}\r\n        autoFocus\r\n        onChange={updateTitleHandler}\r\n      />\r\n    );\r\n  }\r\n);\r\n","import { ChangeEvent, useCallback, FC, memo } from \"react\";\r\nimport style from \"./Task.module.css\";\r\nimport { Checkbox, IconButton } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\n\r\nimport { TaskStatuses } from \"enums/index\";\r\n\r\nimport { deleteTaskTC, updateTaskTC } from \"state/reducers/taskReducer/thunk\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { EditableSpan } from \"components/EditableSpan/EditableSpan\";\r\nimport { EMPTY_STRING } from \"constants/index\";\r\n\r\ntype TaskPropsType = {\r\n  taskId: string;\r\n  todolistId: string;\r\n  status: TaskStatuses;\r\n  taskTitle: string;\r\n};\r\n\r\nexport const Task: FC<TaskPropsType> = memo(\r\n  ({ taskId, todolistId, status, taskTitle }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { Completed, New } = TaskStatuses;\r\n\r\n    const onDeleteTaskButton = () => {\r\n      dispatch(deleteTaskTC(todolistId, taskId));\r\n    };\r\n\r\n    const handleUpdateTaskTitleSpan = useCallback(\r\n      (newTitle: string) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, { title: newTitle }));\r\n      },\r\n      [dispatch, todolistId, taskId]\r\n    );\r\n\r\n    const onChangeTaskStatusBox = (e: ChangeEvent<HTMLInputElement>) => {\r\n      let newIsDoneValue = e.currentTarget.checked;\r\n      dispatch(\r\n        updateTaskTC(todolistId, taskId, {\r\n          status: newIsDoneValue ? Completed : New,\r\n        })\r\n      );\r\n    };\r\n\r\n    return (\r\n      <li className={status === Completed ? style.completedTask : EMPTY_STRING}>\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          size=\"small\"\r\n          onClick={onDeleteTaskButton}\r\n        >\r\n          <Delete fontSize=\"small\" />\r\n        </IconButton>\r\n        <Checkbox\r\n          checked={status === Completed}\r\n          onChange={onChangeTaskStatusBox}\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n        />\r\n        <EditableSpan\r\n          title={taskTitle}\r\n          updateTitle={handleUpdateTaskTitleSpan}\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n);\r\n","import style from \"./Button.module.css\";\r\nimport { FC, memo } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\ntype ButtonPropsType = {\r\n  callback: () => void;\r\n  title: string;\r\n};\r\n\r\nexport const UniversalButton: FC<ButtonPropsType> = memo(\r\n  ({ callback, title }) => {\r\n    return (\r\n      <Button\r\n        variant=\"text\"\r\n        size=\"small\"\r\n        color=\"primary\"\r\n        onClick={callback}\r\n        className={style.btn}\r\n      >\r\n        {title}\r\n      </Button>\r\n    );\r\n  }\r\n);\r\n","import { FC, useCallback, memo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  removeTodoTC,\r\n  updateTodoTitleTC,\r\n} from \"state/reducers/todolistReducer/thunk\";\r\nimport { changeTodolistFilterAC } from \"state/reducers/todolistReducer/todolist-reducer\";\r\nimport { addTaskTC } from \"state/reducers/taskReducer/thunk\";\r\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\r\nimport { Task } from \"../Task/Task\";\r\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\r\nimport { RequestStatusType, FilterValue, TaskStatuses } from \"enums\";\r\nimport { TaskResponseType } from \"api/types\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { UniversalButton } from \"../Button/Button\";\r\n\r\ntype TodolistPropsType = {\r\n  todolistTitle: string;\r\n  tasks: Array<TaskResponseType>;\r\n  filter: FilterValue;\r\n  todolistId: string;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const Todolist: FC<TodolistPropsType> = memo(\r\n  ({ todolistTitle, tasks, filter, todolistId, entityStatus }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { All, CompletedFilter, Active } = FilterValue;\r\n    const { Completed, New } = TaskStatuses;\r\n    const { Loading } = RequestStatusType;\r\n\r\n    const onChangeAllFilterButton = useCallback(() => {\r\n      dispatch(changeTodolistFilterAC({ id: todolistId, newFilter: All }));\r\n    }, [dispatch, todolistId, All]);\r\n\r\n    const onChangeCompletedFilterButton = useCallback(() => {\r\n      dispatch(\r\n        changeTodolistFilterAC({ id: todolistId, newFilter: CompletedFilter })\r\n      );\r\n    }, [dispatch, todolistId, CompletedFilter]);\r\n\r\n    const onChangeActiveFilterButton = useCallback(() => {\r\n      dispatch(changeTodolistFilterAC({ id: todolistId, newFilter: Active }));\r\n    }, [dispatch, todolistId, Active]);\r\n\r\n    const onDeleteTodoIcon = () => {\r\n      dispatch(removeTodoTC(todolistId));\r\n    };\r\n\r\n    const handleAddTaskForm = useCallback(\r\n      (taskTitle: string) => {\r\n        dispatch(addTaskTC(todolistId, taskTitle));\r\n      },\r\n      [dispatch, todolistId]\r\n    );\r\n\r\n    const handleUpdateTodoTitleSpan = useCallback(\r\n      (newTitle: string) => {\r\n        dispatch(updateTodoTitleTC(todolistId, newTitle));\r\n      },\r\n      [todolistId, dispatch]\r\n    );\r\n\r\n    const buttonsArr = [\r\n      { callback: onChangeAllFilterButton, name: All },\r\n      { callback: onChangeCompletedFilterButton, name: CompletedFilter },\r\n      { callback: onChangeActiveFilterButton, name: Active },\r\n    ];\r\n\r\n    let filteredTasks = tasks;\r\n\r\n    if (filter === CompletedFilter) {\r\n      filteredTasks = tasks.filter(({ status }) => status === Completed);\r\n    }\r\n    if (filter === Active) {\r\n      filteredTasks = tasks.filter(({ status }) => status === New);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan\r\n            title={todolistTitle}\r\n            updateTitle={handleUpdateTodoTitleSpan}\r\n          />\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            size=\"small\"\r\n            onClick={onDeleteTodoIcon}\r\n            disabled={entityStatus === Loading}\r\n          >\r\n            <Delete fontSize=\"small\" />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={handleAddTaskForm} />\r\n        <ul>\r\n          {filteredTasks?.map(({ id, status, title }) => {\r\n            return (\r\n              <Task\r\n                key={id}\r\n                taskId={id}\r\n                todolistId={todolistId}\r\n                status={status}\r\n                taskTitle={title}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n        <div>\r\n          {buttonsArr.map(({ callback, name }) => (\r\n            <UniversalButton title={name} callback={callback} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"state/store\";\r\nimport { Path } from \"enums\";\r\nimport { addTodoTC, setTodosTC } from \"state/reducers/todolistReducer/thunk\";\r\nimport { tasksType } from \"state/reducers/taskReducer/types\";\r\nimport { todolistsDomainType } from \"state/reducers/todolistReducer/types\";\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Todolist } from \"../Todolist/Todolist\";\r\n\r\nexport const TodolistList = () => {\r\n  const isLoggedIn = useSelector<RootReducerType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n  const todolists = useSelector<RootReducerType, Array<todolistsDomainType>>(\r\n    (state) => state.todolists\r\n  );\r\n  const tasks = useSelector<RootReducerType, tasksType>((state) => state.tasks);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { LOGIN_PATH } = Path;\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return;\r\n    }\r\n    if (!todolists) {\r\n      dispatch(setTodosTC());\r\n    }\r\n  }, [dispatch, todolists, isLoggedIn]);\r\n\r\n  const addTodolist = useCallback(\r\n    (todolistTitle: string) => {\r\n      dispatch(addTodoTC(todolistTitle));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to={LOGIN_PATH} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodolist} />\r\n      </Grid>\r\n\r\n      <Grid container spacing={3}>\r\n        {todolists.map(({ id, entityStatus, title, filter }) => {\r\n          let tasksForTodolist = tasks[id];\r\n          return (\r\n            <Grid item key={id}>\r\n              <Paper style={{ padding: \"10px\" }}>\r\n                <Todolist\r\n                  key={id}\r\n                  todolistId={id}\r\n                  entityStatus={entityStatus}\r\n                  todolistTitle={title}\r\n                  tasks={tasksForTodolist}\r\n                  filter={filter}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { Path, RequestStatusType } from \"./enums/index\";\r\n\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport style from \"./App.module.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"./state/store\";\r\n\r\nimport ErrorSnackbar from \"./components/Snackbar/Snackbar\";\r\nimport { Login } from \"./components/Login/Login\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { authUserTC, logoutTC } from \"./state/reducers/auth-reducer\";\r\nimport { TodolistList } from \"./components/TodolistList/TodolistList\";\r\n\r\nfunction AppWithRedux() {\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector<RootReducerType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  const isInitialize = useSelector<RootReducerType, boolean>(\r\n    (state) => state.app.isInitialize\r\n  );\r\n  const isLoggedIn = useSelector<RootReducerType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n\r\n  const { Loading } = RequestStatusType;\r\n  const { START, LOGIN_PATH, NOT_FOUND, ANY } = Path;\r\n\r\n  useEffect(() => {\r\n    dispatch(authUserTC());\r\n  }, [dispatch]);\r\n\r\n  const logoutHandler = useCallback(\r\n    function () {\r\n      dispatch(logoutTC());\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <AppBar\r\n        position=\"static\"\r\n        style={{ background: \"SkyBlue\" }}\r\n        className={style.appbar}\r\n      >\r\n        <Toolbar variant=\"dense\" className={style.header}>\r\n          <Typography variant=\"h6\">Todolist</Typography>\r\n          {isLoggedIn && (\r\n            <Button\r\n              onClick={logoutHandler}\r\n              color={\"inherit\"}\r\n              style={{ float: \"right\" }}\r\n            >\r\n              log out\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {status === Loading && <LinearProgress />}\r\n      {!isInitialize ? (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"30%\",\r\n            textAlign: \"center\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        <Container fixed>\r\n          <Routes>\r\n            <Route path={START} element={<TodolistList />} />\r\n            <Route path={LOGIN_PATH} element={<Login />} />\r\n            <Route path={ANY} element={<Navigate to={NOT_FOUND} />} />\r\n            <Route path={NOT_FOUND} element={<h1>PAGE_NOT_FOUND_TEXT</h1>} />\r\n          </Routes>\r\n        </Container>\r\n      )}\r\n      <ErrorSnackbar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import { combineReducers, applyMiddleware } from 'redux';\r\n\r\nimport { tasksReducer } from './reducers/taskReducer/tasks-reducer';\r\n\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\nimport { appReducer } from './reducers/app-reducer';\r\nimport { authReducer } from './reducers/auth-reducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { todolistsReducer } from './reducers/todolistReducer/todolist-reducer';\r\nimport { AppActionType } from './reducers/types';\r\n\r\nexport type ThunkType = ThunkAction<\r\n  void,\r\n  RootReducerType,\r\n  unknown,\r\n  AppActionType\r\n>;\r\n\r\nexport const rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n});\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().prepend(thunk),\r\n});\r\n/*export let store = createStore(rootReducer, applyMiddleware(thunk));*/\r\nexport type ReducerType= typeof rootReducer\r\nexport type RootReducerType = ReturnType<ReducerType>;\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}