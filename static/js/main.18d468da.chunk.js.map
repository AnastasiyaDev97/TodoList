{"version":3,"sources":["App.module.css","components/AddItemForm/AddItemForm.module.css","components/Task/Task.module.css","components/Button/Button.module.css","enum/index.ts","serviceWorker.ts","state/reducers/app-reducer.ts","components/Snackbar/Snackbar.tsx","api/apiCongig.ts","api/todolist-api.ts","utils/error-utils.ts","constants/index.ts","state/reducers/auth-reducer.ts","components/Login/Login.tsx","utils/validates.ts","state/reducers/todolistReducer/todolist-reducer.ts","api/tasks-api.ts","state/reducers/taskReducer/tasks-reducer.ts","state/reducers/taskReducer/thunk.ts","state/reducers/todolistReducer/thunk.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/handlers.ts","components/Task/Task.tsx","components/Button/Button.tsx","components/Todolist/Todolist.tsx","components/TodolistList/TodolistList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["module","exports","TaskPriorities","TaskStatuses","URL_String","Path","FilterValue","RequestStatusType","ResultCodes","Boolean","window","location","hostname","match","initialState","status","Idle","error","isInitialize","slice","createSlice","name","reducers","toggleIsInitialize","state","action","payload","value","setRequestStatus","setErrorText","actions","appReducer","reducer","Alert","React","forwardRef","props","ref","elevation","variant","useStyles","makeStyles","theme","root","width","marginTop","spacing","ErrorSnackbar","useSelector","app","classes","dispatch","useDispatch","handleClose","event","reason","className","Snackbar","open","autoHideDuration","onClose","severity","instance","axios","create","baseURL","process","withCredentials","headers","Todolists","Login","Me","todolistAPI","get","then","res","data","title","post","todolistId","delete","put","authAPI","loginParams","email","password","rememberMe","captcha","Failed","catchErrorHandler","err","message","errorHandler","messages","Loading","Succeeded","success","isLoggedIn","id","login","setIsLoggedInAC","setAuthUserData","authReducer","auth","START","formik","useFormik","initialValues","validate","values","errors","test","length","validates","onSubmit","resetForm","a","dataResponse","resultCode","touched","textFields","touch","type","to","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","rel","target","FormGroup","map","TextField","label","margin","getFieldProps","style","color","FormControlLabel","checked","control","Checkbox","Button","All","removeTodolistAC","index","findIndex","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","newFilter","setTodolistsAC","todolists","tdl","setTodolistProgressStatus","todolistsReducer","Tasks","tasksAPI","taskId","updateTask","description","priority","startDate","deadline","removeTaskAC","tl","addTaskAC","task","updateTaskAC","todoListId","t","setTasksAC","tasks","extraReducers","builder","addCase","forEach","f","tasksReducer","updateTaskTC","updateElemInTask","getState","currTask","find","updateTaskForAPI","AddItemForm","memo","addItem","useState","setTitle","setError","addTaskHandler","trim","console","log","s","wrapper","onChange","e","currentTarget","onKeyPress","key","size","IconButton","onClick","AddBoxOutlined","EditableSpan","updateTitle","edit","setEdit","currTitle","setCurrTitle","onDoubleClick","onBlur","autoFocus","getCurrentDate","Date","getDate","Number","getMonth","getFullYear","Task","taskTitle","Completed","New","handleUpdateTaskTitleSpan","useCallback","newTitle","completedTask","deleteTaskTC","Delete","fontSize","newIsDoneValue","UniversalButton","callback","btn","Todolist","todolistTitle","CompletedFilter","Active","onChangeAllFilterButton","onChangeCompletedFilterButton","onChangeActiveFilterButton","handleAddTaskForm","addTaskTC","handleUpdateTodoTitleSpan","updateTodoTitleTC","buttonsArr","filteredTasks","removeTodoTC","disabled","TodolistList","LOGIN_PATH","useEffect","todo","items","addTodolist","padding","tasksForTodolist","Paper","AppWithRedux","NOT_FOUND","ANY","logoutHandler","AppBar","position","background","appbar","Toolbar","header","Typography","float","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.18d468da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appbar\":\"App_appbar__1EO4s\",\"header\":\"App_header__207lv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"AddItemForm_error__2J-Oc\",\"wrapper\":\"AddItemForm_wrapper__1GGgW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedTask\":\"Task_completedTask__3-tRz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__2FiqN\"};","export enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum URL_String {\r\n  Todolists = \"todo-lists\",\r\n  Tasks = \"tasks\",\r\n  Login = \"auth/login\",\r\n  Me = \"auth/me\",\r\n}\r\n\r\nexport enum Path {\r\n  START = \"/\",\r\n  LOGIN_PATH = \"/login\",\r\n  NOT_FOUND = \"/404\",\r\n  ANY = \"*\",\r\n}\r\n\r\nexport enum FilterValue {\r\n  All = \"all\",\r\n  CompletedFilter = \"completed\",\r\n  Active = \"active\",\r\n}\r\n\r\nexport enum RequestStatusType {\r\n  Idle = \"idle\",\r\n  Loading = \"loading\",\r\n  Succeeded = \"succeeded\",\r\n  Failed = \"failed\",\r\n}\r\n\r\nexport enum ResultCodes {\r\n  success = 0,\r\n  error = 1,\r\n  captcha = 10,\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Nullable } from \"../../type/Nullable\";\r\nimport { RequestStatusType } from \"../../enum/index\";\r\n\r\nconst { Idle } = RequestStatusType;\r\n\r\nconst initialState = {\r\n  status: Idle,\r\n  error: null as Nullable<string>,\r\n  isInitialize: false,\r\n};\r\nexport type appInitialStateType = {\r\n  status: RequestStatusType;\r\n  error: Nullable<string>;\r\n  isInitialize: boolean;\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"app\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    toggleIsInitialize(state, action: PayloadAction<{ value: boolean }>) {\r\n      state.isInitialize = action.payload.value;\r\n    },\r\n\r\n    setRequestStatus(\r\n      state,\r\n      action: PayloadAction<{ status: RequestStatusType }>\r\n    ) {state.status = action.payload.status;},\r\n\r\n    setErrorText(state, action: PayloadAction<{ error: Nullable<string> }>) {\r\n      state.error = action.payload.error;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setRequestStatus, toggleIsInitialize, setErrorText } =\r\n  slice.actions;\r\nexport const appReducer = slice.reducer;\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"../../state/store\";\r\nimport { setErrorText } from \"../../state/reducers/app-reducer\";\r\nimport { Nullable } from \"../../type/Nullable\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function ErrorSnackbar() {\r\n    \r\n  const error = useSelector<RootReducerType, Nullable<string>>(\r\n    (state) => state.app.error\r\n  );\r\n\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setErrorText({ error: null }));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error} &#128557;\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { EMPTY_STRING } from \"../constants\";\r\nexport const instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BASE_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': process.env.REACT_APP_API_KEY||EMPTY_STRING\r\n    },\r\n})","import { instance } from \"./apiCongig\";\r\nimport {\r\n  AuthUserDataType,\r\n  loginParamsType,\r\n  ResponseT,\r\n  TodolistResponseType,\r\n} from \"./types\";\r\nimport { URL_String } from \"./../enum/index\";\r\nconst { Todolists, Login, Me } = URL_String;\r\n\r\nexport const todolistAPI = {\r\n  GetTodolists() {\r\n    return instance.get<Array<TodolistResponseType>>(Todolists).then((res) => {\r\n      return res.data;\r\n    });\r\n  },\r\n  \r\n  CreateTodolist(title: string) {\r\n    return instance\r\n      .post<ResponseT<{ item: TodolistResponseType }>>(Todolists, { title })\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n\r\n  DeleteTodolist(todolistId: string) {\r\n    return instance\r\n      .delete<ResponseT>(`${Todolists}/${todolistId}`)\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n\r\n  UpdateTodolistTitle(todolistId: string, title: string) {\r\n    return instance\r\n      .put<ResponseT>(`${Todolists}/${todolistId}`, { title })\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n};\r\n\r\nexport const authAPI = {\r\n  login(loginParams: loginParamsType) {\r\n    let { email, password, rememberMe, captcha } = loginParams;\r\n    return instance\r\n      .post<ResponseT<{ userId: number }>>(Login, {\r\n        email,\r\n        password,\r\n        rememberMe,\r\n        captcha,\r\n      })\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n\r\n  logout() {\r\n    return instance.delete<ResponseT>(Login).then((res) => {\r\n      return res.data;\r\n    });\r\n  },\r\n\r\n  getAuthData() {\r\n    return instance\r\n      .get<ResponseT<AuthUserDataType>>(Me)\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n","import { setErrorText, setRequestStatus } from \"../state/reducers/app-reducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ResponseT } from \"../api/types\";\r\nimport { RequestStatusType } from \"./../enum\";\r\nimport {\r\n  setErrorTextType,\r\n  setRequestStatusType,\r\n} from \"../state/reducers/types\";\r\nimport { FIRST_INDEX, SOME_ERROR } from \"../constants\";\r\n\r\nconst { Failed } = RequestStatusType;\r\n\r\nexport const catchErrorHandler = (\r\n  dispatch: ErrorUtilsDispatchType,\r\n  err: any\r\n) => {\r\n  dispatch(setErrorText({ error: err.message }));\r\n  dispatch(setRequestStatus({ status: Failed }));\r\n};\r\n\r\nexport const errorHandler = <T>(\r\n  dispatch: ErrorUtilsDispatchType,\r\n  data: ResponseT<T>\r\n) => {\r\n  const { messages } = data;\r\n  if (messages) {\r\n    dispatch(setErrorText({ error: messages[FIRST_INDEX] }));\r\n  } else {\r\n    dispatch(setErrorText({ error: SOME_ERROR }));\r\n  }\r\n  dispatch(setRequestStatus({ status: Failed }));\r\n};\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setErrorTextType | setRequestStatusType>;\r\n","export const EMPTY_STRING = \"\";\r\nexport const PAGE_NOT_FOUND_TEXT = \"404: Page not found\";\r\nexport const FIRST_INDEX = 0;\r\nexport const SOME_ERROR = \"Some error occurred\";\r\nexport const LINK_TO_REGISTER = \"https://social-network.samuraijs.com/\";\r\n","import { Dispatch } from \"redux\";\r\nimport { setRequestStatus, toggleIsInitialize } from \"./app-reducer\";\r\nimport { authAPI } from \"../../api/todolist-api\";\r\nimport { catchErrorHandler, errorHandler } from \"../../utils/error-utils\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Nullable } from \"../../type/Nullable\";\r\nimport { RequestStatusType, ResultCodes } from \"../../enum/index\";\r\nimport { AuthUserDataType, loginParamsType } from \"../../api/types\";\r\n\r\nconst { Loading, Succeeded } = RequestStatusType;\r\nconst { success } = ResultCodes;\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  data: {\r\n    id: null as Nullable<number>,\r\n    login: null as Nullable<string>,\r\n    email: null as Nullable<string>,\r\n  },\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"app\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n      state.isLoggedIn = action.payload.value;\r\n    },\r\n    setAuthUserData(state, action: PayloadAction<{ data: AuthUserDataType }>) {\r\n      state.data = action.payload.data;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setIsLoggedInAC, setAuthUserData } = slice.actions;\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const loginTC =\r\n  (data: loginParamsType) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let dataResponse = await authAPI.login(data);\r\n      if (dataResponse.resultCode === success) {\r\n        dispatch(setIsLoggedInAC({ value: true }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, dataResponse);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await authAPI.logout();\r\n    if (data.resultCode === success) {\r\n      dispatch(setIsLoggedInAC({ value: false }));\r\n      dispatch(setRequestStatus({ status: Succeeded }));\r\n    } else {\r\n      errorHandler(dispatch, data);\r\n    }\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  }\r\n};\r\n\r\nexport const authUserTC = () => async (dispatch: Dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await authAPI.getAuthData();\r\n    if (data.resultCode === success) {\r\n      dispatch(setIsLoggedInAC({ value: true }));\r\n    }\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  } finally {\r\n    dispatch(toggleIsInitialize({ value: true }));\r\n    dispatch(setRequestStatus({ status: Succeeded }));\r\n  }\r\n};\r\n","import Grid from \"@material-ui/core/Grid/Grid\";\r\n\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useFormik } from \"formik\";\r\nimport { loginTC } from \"../../state/reducers/auth-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"../../state/store\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Path } from \"../../enum\";\r\nimport { EMPTY_STRING, LINK_TO_REGISTER } from \"../../constants\";\r\nimport { validates, FormikErrorType } from \"../../utils/validates\";\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoggedIn = useSelector<RootReducerType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n\r\n  const { START } = Path;\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email:  process.env.REACT_APP_LOGIN as string ,\r\n      password:  process.env.REACT_APP_PASSWORD as string ,\r\n      rememberMe: false,\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      validates(values, errors);\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      formik.resetForm();\r\n      dispatch(loginTC(values));\r\n    },\r\n  });\r\n\r\n  const { touched } = formik;\r\n  const { password, email } = formik.errors;\r\n  const textFields = [\r\n    { name: \"email\", err: email, touch: touched.email,type:'text'},\r\n    { name: \"password\", err: password, touch: touched.password,type:'password' },\r\n  ];\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to={START} />;\r\n  }\r\n  return (\r\n    <Grid container justifyContent={\"center\"}>\r\n      <Grid item justifyContent={\"center\"}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered\r\n                <a href={LINK_TO_REGISTER} rel=\"noreferrer\" target={\"_blank\"}>\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n\r\n            <FormGroup>\r\n              {textFields.map(({ name, touch, err,type }) => (\r\n                <>\r\n                  <TextField\r\n                    key={name}\r\n                    label={name}\r\n                    margin=\"normal\"\r\n                    type={type}\r\n                    {...formik.getFieldProps({ name })}\r\n                  />\r\n                  {touch && err && <div style={{ color: \"red\" }}>{err}</div>}\r\n                </>\r\n              ))}\r\n\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                checked={formik.values.rememberMe}\r\n                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\r\n              />\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","export const validates = (\r\n  values: FormikValuesType,\r\n  errors: FormikErrorType\r\n) => {\r\n  const { email, password } = values;\r\n  if (!email) {\r\n    errors.email = \"Required\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n    errors.email = \"Invalid email address\";\r\n  }\r\n  if (!password) {\r\n    errors.password = \"Required\";\r\n  }\r\n  if (password.length < 3) {\r\n    errors.password = \"Min password length is 3 symbols\";\r\n  }\r\n};\r\n\r\nexport type FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n};\r\ntype FormikValuesType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { TodolistResponseType } from \"../../../api/types\";\r\nimport { FilterValue, RequestStatusType } from \"../../../enum\";\r\nimport { todolistStateType } from \"./types\";\r\n\r\nconst { Idle } = RequestStatusType;\r\nconst { All } = FilterValue;\r\n\r\nlet initialState: todolistStateType = [];\r\n\r\nconst slice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: initialState,\r\n  reducers: {\r\n\r\n    removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n      let index = state.findIndex(({ id }) => id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.splice(index, 1); //с какого индекса, сколько эл-ов\r\n      }\r\n    },\r\n\r\n    addTodolistAC(\r\n      state,\r\n      action: PayloadAction<{ todolist: TodolistResponseType }>\r\n    ) {\r\n      state.unshift({\r\n        ...action.payload.todolist,\r\n        filter: All,\r\n        entityStatus: Idle,\r\n      });\r\n    },\r\n\r\n    changeTodolistTitleAC(state) {\r\n      return state;\r\n    },\r\n\r\n    changeTodolistFilterAC(\r\n      state,\r\n      action: PayloadAction<{ id: string; newFilter: FilterValue }>\r\n    ) {\r\n      let index = state.findIndex(({ id }) => id === action.payload.id);\r\n      state[index] = { ...state[index], filter: action.payload.newFilter };\r\n    },\r\n\r\n    setTodolistsAC(\r\n      state,\r\n      action: PayloadAction<{ todolists: Array<TodolistResponseType> }>\r\n    ) {\r\n      return action.payload.todolists.map((tdl) => ({\r\n        ...tdl,\r\n        filter: All,\r\n        entityStatus: Idle,\r\n      }));\r\n    },\r\n    \r\n    setTodolistProgressStatus(\r\n      state,\r\n      action: PayloadAction<{\r\n        entityStatus: RequestStatusType;\r\n        todolistId: string;\r\n      }>\r\n    ) {\r\n      let index = state.findIndex(({ id }) => id === action.payload.todolistId);\r\n      state[index] = {\r\n        ...state[index],\r\n        entityStatus: action.payload.entityStatus,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  removeTodolistAC,\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  changeTodolistFilterAC,\r\n  setTodolistsAC,\r\n  setTodolistProgressStatus,\r\n} = slice.actions;\r\nexport const todolistsReducer = slice.reducer;\r\n","import { instance } from \"./apiCongig\";\r\nimport {\r\n  GetTasksResponseType,\r\n  ResponseT,\r\n  TaskResponseType,\r\n  updateTaskType,\r\n} from \"./types\";\r\nimport { URL_String } from \"./../enum/index\";\r\nconst { Todolists, Tasks } = URL_String;\r\n\r\nexport const tasksAPI = {\r\n  GetTasks(todolistId: string) {\r\n    return instance\r\n      .get<GetTasksResponseType>(`${Todolists}/${todolistId}/${Tasks}`)\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n  CreateTask(todolistId: string, title: string) {\r\n    return instance\r\n      .post<ResponseT<{ item: TaskResponseType }>>(\r\n        `${Todolists}/${todolistId}/${Tasks}`,\r\n        { title }\r\n      )\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n  DeleteTask(todolistId: string, taskId: string) {\r\n    return instance\r\n      .delete<ResponseT>(`${Todolists}/${todolistId}/${Tasks}/${taskId}`)\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n\r\n  UpdateTask(todolistId: string, taskId: string, updateTask: updateTaskType) {\r\n    let { title, description, status, priority, startDate, deadline } =\r\n      updateTask;\r\n    return instance\r\n      .put<ResponseT<{ item: TaskResponseType }>>(\r\n        `${Todolists}/${todolistId}/${Tasks}/${taskId}`,\r\n        {\r\n          title,\r\n          description,\r\n          status,\r\n          priority,\r\n          startDate,\r\n          deadline,\r\n        }\r\n      )\r\n      .then((res) => {\r\n        return res.data;\r\n      });\r\n  },\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addTodolistAC,\r\n  removeTodolistAC,\r\n  setTodolistsAC,\r\n} from \"../todolistReducer/todolist-reducer\";\r\nimport { TaskResponseType } from \"../../../api/types\";\r\nimport { tasksType } from \"./types\";\r\n\r\nlet initialState: tasksType = {\r\n  /* 'todoid1':[{id:string,title:string,description:null,todoListId:string, order:number,status:null|number\r\n    priority:number,startDate:null,deadline:null],\r\n    */\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: initialState,\r\n  reducers: {\r\n\r\n    removeTaskAC(state, action: PayloadAction<{ taskId: string; id: string }>) {\r\n      let index = state[action.payload.id].findIndex(\r\n        (tl) => tl.id === action.payload.taskId\r\n      );\r\n      if (index !== -1) {\r\n        state[action.payload.id].splice(index, 1); //с какого индекса, сколько эл-ов\r\n      }\r\n    },\r\n\r\n    addTaskAC(\r\n      state,\r\n      action: PayloadAction<{ task: TaskResponseType; id: string }>\r\n    ) {\r\n      state[action.payload.id].unshift(action.payload.task);\r\n    },\r\n\r\n    updateTaskAC(\r\n      state,\r\n      action: PayloadAction<{ task: TaskResponseType; taskId: string }>\r\n    ) {\r\n      let index = state[action.payload.task.todoListId].findIndex(\r\n        (t) => t.id === action.payload.taskId\r\n      );\r\n      state[action.payload.task.todoListId][index] = {\r\n        ...state[action.payload.task.todoListId][index],\r\n        ...action.payload.task,\r\n      };\r\n    },\r\n\r\n    setTasksAC(\r\n      state,\r\n      action: PayloadAction<{\r\n        tasks: Array<TaskResponseType>;\r\n        todolistId: string;\r\n      }>\r\n    ) {\r\n      state[action.payload.todolistId] = action.payload.tasks;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n      state[action.payload.todolist.id] = [];\r\n    });\r\n\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n      action.payload.todolists.forEach((f) => {\r\n        state[f.id] = [];\r\n      });\r\n    });\r\n    \r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n      delete state[action.payload.id];\r\n    });\r\n  },\r\n});\r\n\r\nexport const { removeTaskAC, addTaskAC, updateTaskAC, setTasksAC } =\r\n  slice.actions;\r\nexport const tasksReducer = slice.reducer;\r\n","import { RequestStatusType, ResultCodes } from \"../../../enum/index\";\r\nimport { tasksAPI } from \"../../../api/tasks-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RootReducerType } from \"../../store\";\r\nimport { setRequestStatus } from \"../app-reducer\";\r\nimport { catchErrorHandler, errorHandler } from \"../../../utils/error-utils\";\r\nimport {\r\n  addTaskAC,\r\n  removeTaskAC,\r\n  setTasksAC,\r\n  updateTaskAC,\r\n} from \"./tasks-reducer\";\r\nimport { updateElemInTaskType } from \"./types\";\r\nimport { updateTaskType } from \"../../../api/types\";\r\n\r\nconst { Succeeded, Loading } = RequestStatusType;\r\nconst { success } = ResultCodes;\r\n\r\nexport const getTasksTC =\r\n  (todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let data = await tasksAPI.GetTasks(todolistId);\r\n      dispatch(setTasksAC({ tasks: data.items, todolistId }));\r\n      dispatch(setRequestStatus({ status: Succeeded }));\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const deleteTaskTC =\r\n  (todolistId: string, taskId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let data = await tasksAPI.DeleteTask(todolistId, taskId);\r\n      if (data.resultCode === success) {\r\n        dispatch(removeTaskAC({ taskId, id: todolistId }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const addTaskTC =\r\n  (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      let data = await tasksAPI.CreateTask(todolistId, title);\r\n      if (data.resultCode === success) {\r\n        let task = data.data.item;\r\n        dispatch(addTaskAC({ task, id: todolistId }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const updateTaskTC =\r\n(\r\n    todolistId: string,\r\n    taskId: string,\r\n    updateElemInTask: updateElemInTaskType\r\n  ) =>\r\n  async (dispatch: Dispatch, getState: () => RootReducerType) => {\r\n    let tasks = getState().tasks;\r\n    let currTask = tasks[todolistId].find(({ id }) => id === taskId);\r\n    try {\r\n      if (currTask) {\r\n        let updateTask: updateTaskType = currTask;\r\n        let updateTaskForAPI = { ...updateTask, ...updateElemInTask };\r\n        dispatch(setRequestStatus({ status: Loading }));\r\n        let data = await tasksAPI.UpdateTask(\r\n          todolistId,\r\n          taskId,\r\n          updateTaskForAPI\r\n        );\r\n        if (data.resultCode === success) {\r\n          let task = data.data.item;\r\n          dispatch(updateTaskAC({ task, taskId }));\r\n          dispatch(setRequestStatus({ status: Succeeded }));\r\n        } else {\r\n          errorHandler(dispatch, data);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n","import { catchErrorHandler, errorHandler } from \"../../../utils/error-utils\";\r\nimport { RequestStatusType, ResultCodes } from \"../../../enum\";\r\nimport { Dispatch } from \"redux\";\r\nimport { todolistAPI } from \"../../../api/todolist-api\";\r\nimport { setRequestStatus } from \"../app-reducer\";\r\nimport {\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  removeTodolistAC,\r\n  setTodolistProgressStatus,\r\n  setTodolistsAC,\r\n} from \"./todolist-reducer\";\r\nimport { getTasksTC } from \"../taskReducer/thunk\";\r\nimport { ThunkType } from \"../../store\";\r\n\r\nconst { Loading, Succeeded, Failed } = RequestStatusType;\r\nconst { success } = ResultCodes;\r\n\r\nexport const setTodosTC = (): ThunkType => async (dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await todolistAPI.GetTodolists();\r\n    dispatch(setTodolistsAC({ todolists: data }));\r\n    dispatch(setRequestStatus({ status: Succeeded }));\r\n    data.forEach((todo) => dispatch(getTasksTC(todo.id)));\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  }\r\n};\r\n\r\nexport const removeTodoTC =\r\n  (todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      dispatch(setTodolistProgressStatus({ entityStatus: Loading, todolistId }));\r\n      let data = await todolistAPI.DeleteTodolist(todolistId);\r\n      if (data.resultCode === success) {\r\n        dispatch(removeTodolistAC({ id: todolistId }));\r\n        dispatch(setTodolistProgressStatus({ entityStatus: Succeeded, todolistId }));\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n        dispatch(setTodolistProgressStatus({ entityStatus: Failed, todolistId }));\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n\r\nexport const addTodoTC = (title: string) => async (dispatch: Dispatch) => {\r\n  try {\r\n    dispatch(setRequestStatus({ status: Loading }));\r\n    let data = await todolistAPI.CreateTodolist(title);\r\n    if (data.resultCode === success) {\r\n      dispatch(addTodolistAC({ todolist: data.data.item }));\r\n      dispatch(setRequestStatus({ status: Succeeded }));\r\n    } else {\r\n      errorHandler(dispatch, data);\r\n    }\r\n  } catch (err) {\r\n    catchErrorHandler(dispatch, err);\r\n  }\r\n};\r\n\r\nexport const updateTodoTitleTC =\r\n  (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch(setRequestStatus({ status: Loading }));\r\n      const data = await todolistAPI.UpdateTodolistTitle(todolistId, title);\r\n\r\n      if (data.resultCode === success) {\r\n        dispatch(changeTodolistTitleAC());\r\n        dispatch(setRequestStatus({ status: Succeeded }));\r\n      } else {\r\n        errorHandler(dispatch, data);\r\n      }\r\n    } catch (err) {\r\n      catchErrorHandler(dispatch, err);\r\n    }\r\n  };\r\n","import s from \"./AddItemForm.module.css\";\r\nimport { ChangeEvent, KeyboardEvent, useState,FC,memo } from \"react\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport { AddBoxOutlined } from \"@material-ui/icons\";\r\nimport { EMPTY_STRING } from \"../../constants\";\r\nimport { Nullable } from \"../../type/Nullable\";\r\n\r\ntype addItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n};\r\n\r\nexport const AddItemForm:FC<addItemFormPropsType> = memo(({addItem}) => {\r\n  let [title, setTitle] = useState<string>(EMPTY_STRING);\r\n  let [error, setError] = useState<Nullable<string>>(null);\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n    if (e.currentTarget.value.length > 0) {\r\n      setError(null);\r\n    }\r\n  };\r\n  const addTaskHandler = () => {\r\n    if (title.trim() !== EMPTY_STRING) {\r\n      addItem(title);\r\n      setTitle(EMPTY_STRING);\r\n    } else {\r\n      setError(\"name required\");\r\n    }\r\n  };\r\n\r\n  const onKeyPressAddTaskHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      addTaskHandler();\r\n    }\r\n  };\r\n  console.log(\"addItem\");\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <TextField\r\n        error={!!error}\r\n        id={error ? \"outlined-error\" : \"standard-basic\"}\r\n        label={error ? \"Error\" : \"write title\"}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressAddTaskHandler}\r\n        value={title}\r\n        size=\"small\"\r\n      />\r\n\r\n      <IconButton size=\"small\" onClick={addTaskHandler}>\r\n        <AddBoxOutlined style={{ color: \"LightGreen\" }} />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import TextField from \"@material-ui/core/TextField/TextField\";\r\nimport { ChangeEvent, useState, FC, memo } from \"react\";\r\n\r\ntype editableSpanPropsType = {\r\n  title: string;\r\n  updateTitle: (newTitle: string) => void;\r\n};\r\n\r\nexport const EditableSpan: FC<editableSpanPropsType> = memo(\r\n  ({ title, updateTitle }) => {\r\n\r\n    let [edit, setEdit] = useState(true);\r\n    let [currTitle, setCurrTitle] = useState(title);\r\n\r\n    const activateInputMode = () => {\r\n      setEdit(false);\r\n    };\r\n\r\n    const activateSpanMode = () => {\r\n      setEdit(true);\r\n      updateTitle(currTitle);\r\n    };\r\n\r\n    const updateTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setCurrTitle(e.currentTarget.value);\r\n    };\r\n    \r\n    return edit ? (\r\n      <span onDoubleClick={activateInputMode}>{title}</span>\r\n    ) : (\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        variant=\"standard\"\r\n        value={currTitle}\r\n        onBlur={activateSpanMode}\r\n        autoFocus\r\n        onChange={updateTitleHandler}\r\n      />\r\n    );\r\n  }\r\n);\r\n","export const getCurrentDate = `${new Date().getDate()}${\r\n  Number(new Date().getMonth()) + 1\r\n} ${new Date().getFullYear()}`;\r\n","import { ChangeEvent, useCallback, FC, memo } from \"react\";\r\nimport style from \"./Task.module.css\";\r\nimport { Checkbox, IconButton } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\r\nimport { TaskStatuses } from \"../../enum/index\";\r\nimport { EMPTY_STRING } from \"../../constants\";\r\nimport {\r\n  deleteTaskTC,\r\n  updateTaskTC,\r\n} from \"../../state/reducers/taskReducer/thunk\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getCurrentDate } from \"../../utils/handlers\";\r\n\r\ntype TaskPropsType = {\r\n  taskId: string;\r\n  todolistId: string;\r\n  status: TaskStatuses;\r\n  taskTitle: string;\r\n};\r\n\r\nexport const Task: FC<TaskPropsType> = memo(\r\n  ({ taskId, todolistId, status, taskTitle }) => {\r\n    console.log(getCurrentDate);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { Completed, New } = TaskStatuses;\r\n\r\n    const onDeleteTaskButton = () => {\r\n      dispatch(deleteTaskTC(todolistId, taskId));\r\n    };\r\n\r\n    const handleUpdateTaskTitleSpan = useCallback(\r\n      (newTitle: string) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, { title: newTitle }));\r\n      },\r\n      [dispatch, todolistId, taskId]\r\n    );\r\n\r\n    const onChangeTaskStatusBox = (e: ChangeEvent<HTMLInputElement>) => {\r\n      let newIsDoneValue = e.currentTarget.checked;\r\n      dispatch(\r\n        updateTaskTC(todolistId, taskId, {\r\n          status: newIsDoneValue ? Completed : New,\r\n        })\r\n      );\r\n    };\r\n\r\n    return (\r\n      <li className={status === Completed ? style.completedTask : EMPTY_STRING}>\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          size=\"small\"\r\n          onClick={onDeleteTaskButton}\r\n        >\r\n          <Delete fontSize=\"small\" />\r\n        </IconButton>\r\n        <Checkbox\r\n          checked={status === Completed}\r\n          onChange={onChangeTaskStatusBox}\r\n          color={\"secondary\"}\r\n          size=\"small\"\r\n        />\r\n        <EditableSpan\r\n          title={taskTitle}\r\n          updateTitle={handleUpdateTaskTitleSpan}\r\n        />\r\n      </li>\r\n    );\r\n  }\r\n);\r\n","import s from \"./Button.module.css\";\r\nimport { FC, memo } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\ntype ButtonPropsType = {\r\n  callback: () => void;\r\n  title: string;\r\n};\r\nexport const UniversalButton: FC<ButtonPropsType> = memo(\r\n  ({ callback, title }) => {\r\n    return (\r\n      <Button\r\n        variant=\"text\"\r\n        size=\"small\"\r\n        color=\"primary\"\r\n        onClick={callback}\r\n        className={s.btn}\r\n      >\r\n        {title}\r\n      </Button>\r\n    );\r\n  }\r\n);\r\n","import { FC, useCallback, memo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  removeTodoTC,\r\n  updateTodoTitleTC,\r\n} from \"../../state/reducers/todolistReducer/thunk\";\r\nimport { changeTodolistFilterAC } from \"../../state/reducers/todolistReducer/todolist-reducer\";\r\nimport { addTaskTC } from \"../../state/reducers/taskReducer/thunk\";\r\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\r\nimport { Task } from \"../Task/Task\";\r\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\r\nimport { RequestStatusType, FilterValue, TaskStatuses } from \"../../enum/index\";\r\nimport { TaskResponseType } from \"../../api/types\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { UniversalButton } from \"../Button/Button\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n  todolistTitle: string;\r\n  tasks: Array<TaskResponseType>;\r\n  filter: FilterValue;\r\n  todolistId: string;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport const Todolist: FC<TodolistPropsType> = memo(\r\n  ({ todolistTitle, tasks, filter, todolistId, entityStatus }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { All, CompletedFilter, Active } = FilterValue;\r\n    const { Completed, New } = TaskStatuses;\r\n    const { Loading } = RequestStatusType;\r\n\r\n    const onChangeAllFilterButton = useCallback(() => {\r\n      dispatch(changeTodolistFilterAC({ id: todolistId, newFilter: All }));\r\n    }, [dispatch, todolistId, All]);\r\n\r\n    const onChangeCompletedFilterButton = useCallback(() => {\r\n      dispatch(\r\n        changeTodolistFilterAC({ id: todolistId, newFilter: CompletedFilter })\r\n      );\r\n    }, [dispatch, todolistId, CompletedFilter]);\r\n\r\n    const onChangeActiveFilterButton = useCallback(() => {\r\n      dispatch(changeTodolistFilterAC({ id: todolistId, newFilter: Active }));\r\n    }, [dispatch, todolistId, Active]);\r\n\r\n    const onDeleteTodoIcon = () => {\r\n      dispatch(removeTodoTC(todolistId));\r\n    };\r\n\r\n    const handleAddTaskForm = useCallback(\r\n      (taskTitle: string) => {\r\n        dispatch(addTaskTC(todolistId, taskTitle));\r\n      },\r\n      [dispatch, todolistId]\r\n    );\r\n\r\n    const handleUpdateTodoTitleSpan = useCallback(\r\n      (newTitle: string) => {\r\n        dispatch(updateTodoTitleTC(todolistId, newTitle));\r\n      },\r\n      [todolistId, dispatch]\r\n    );\r\n\r\n    const buttonsArr = [\r\n      { callback: onChangeAllFilterButton, name: All },\r\n      { callback: onChangeCompletedFilterButton, name: CompletedFilter },\r\n      { callback: onChangeActiveFilterButton, name: Active },\r\n    ];\r\n\r\n    let filteredTasks = tasks;\r\n\r\n    if (filter === CompletedFilter) {\r\n      filteredTasks = tasks.filter(({ status }) => status === Completed);\r\n    }\r\n    if (filter === Active) {\r\n      filteredTasks = tasks.filter(({ status }) => status === New);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan\r\n            title={todolistTitle}\r\n            updateTitle={handleUpdateTodoTitleSpan}\r\n          />\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            size=\"small\"\r\n            onClick={onDeleteTodoIcon}\r\n            disabled={entityStatus === Loading}\r\n          >\r\n            <Delete fontSize=\"small\" />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={handleAddTaskForm} />\r\n        <ul>\r\n          {filteredTasks.map(({ id, status, title }) => {\r\n            return (\r\n              <Task\r\n                key={id}\r\n                taskId={id}\r\n                todolistId={todolistId}\r\n                status={status}\r\n                taskTitle={title}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n        <div>\r\n          {buttonsArr.map(({ callback, name }) => (\r\n            <UniversalButton title={name}\r\n              callback={callback}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"../../state/store\";\r\nimport { Path } from \"../../enum/index\";\r\nimport {\r\n  addTodoTC,\r\n  setTodosTC,\r\n} from \"../../state/reducers/todolistReducer/thunk\";\r\nimport { tasksType } from \"../../state/reducers/taskReducer/types\";\r\nimport { todolistsDomainType } from \"../../state/reducers/todolistReducer/types\";\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Todolist } from \"../Todolist/Todolist\";\r\n\r\nexport const TodolistList = () => {\r\n\r\n  const isLoggedIn = useSelector<RootReducerType, boolean>(\r\n    (state) => state.auth.isLoggedIn);\r\n  const todolists = useSelector<RootReducerType, Array<todolistsDomainType>>(\r\n    (state) => state.todolists);\r\n  const tasks = useSelector<RootReducerType, tasksType>((state) => state.tasks);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { LOGIN_PATH } = Path;\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return;\r\n    }\r\n    dispatch(setTodosTC());\r\n  }, []);\r\n\r\n  const addTodolist = useCallback(\r\n    (todolistTitle: string) => {\r\n      dispatch(addTodoTC(todolistTitle));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Navigate to={LOGIN_PATH} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodolist} />\r\n      </Grid>\r\n\r\n      <Grid container spacing={3}>\r\n        {todolists.map(({ id, entityStatus, title, filter }) => {\r\n          let tasksForTodolist = tasks[id];\r\n          return (\r\n              \r\n            <Grid item key={id}>\r\n              <Paper style={{ padding: \"10px\" }}>\r\n                <Todolist\r\n                  key={id}\r\n                  todolistId={id}\r\n                  entityStatus={entityStatus}\r\n                  todolistTitle={title}\r\n                  tasks={tasksForTodolist}\r\n                  filter={filter}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { Path, RequestStatusType } from \"./enum/index\";\r\n\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport style from \"./App.module.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootReducerType } from \"./state/store\";\r\n\r\nimport ErrorSnackbar from \"./components/Snackbar/Snackbar\";\r\nimport { Login } from \"./components/Login/Login\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { authUserTC, logoutTC } from \"./state/reducers/auth-reducer\";\r\nimport { TodolistList } from \"./components/TodolistList/TodolistList\";\r\n\r\nfunction AppWithRedux() {\r\n  const dispatch = useDispatch();\r\n\r\n  const status = useSelector<RootReducerType, RequestStatusType>(\r\n    (state) => state.app.status);\r\n  const isInitialize = useSelector<RootReducerType, boolean>(\r\n    (state) => state.app.isInitialize);\r\n  const isLoggedIn = useSelector<RootReducerType, boolean>(\r\n    (state) => state.auth.isLoggedIn );\r\n\r\n  const { Loading } = RequestStatusType;\r\n  const { START, LOGIN_PATH, NOT_FOUND, ANY } = Path;\r\n\r\n  useEffect(() => {\r\n    dispatch(authUserTC());\r\n  }, []);\r\n\r\n  const logoutHandler = useCallback(\r\n    function () {\r\n      dispatch(logoutTC());\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <AppBar\r\n        position=\"static\"\r\n        style={{ background: \"SkyBlue\" }}\r\n        className={style.appbar}\r\n      >\r\n        <Toolbar variant=\"dense\" className={style.header}>\r\n          <Typography variant=\"h6\">Todolist</Typography>\r\n          {isLoggedIn && (\r\n            <Button\r\n              onClick={logoutHandler}\r\n              color={\"inherit\"}\r\n              style={{ float: \"right\" }}\r\n            >\r\n              log out\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {status === Loading && <LinearProgress />}\r\n      {!isInitialize ? (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"30%\",\r\n            textAlign: \"center\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        <Container fixed>\r\n          <Routes>\r\n            <Route path={START} element={<TodolistList />} />\r\n            <Route path={LOGIN_PATH} element={<Login />} />\r\n            <Route path={ANY} element={<Navigate to={ANY} />} />\r\n            <Route path={NOT_FOUND} element={<h1>PAGE_NOT_FOUND_TEXT</h1>} />\r\n          </Routes>\r\n        </Container>\r\n      )}\r\n      <ErrorSnackbar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import { combineReducers } from \"redux\";\r\nimport { tasksReducer } from \"./reducers/taskReducer/tasks-reducer\";\r\n\r\nimport thunk, { ThunkAction } from \"redux-thunk\";\r\nimport { appReducer } from \"./reducers/app-reducer\";\r\nimport { authReducer } from \"./reducers/auth-reducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { todolistsReducer } from \"./reducers/todolistReducer/todolist-reducer\";\r\nimport { AppActionType } from \"./reducers/types\";\r\n\r\nexport type ThunkType = ThunkAction<\r\n  void,\r\n  RootReducerType,\r\n  unknown,\r\n  AppActionType\r\n>;\r\n\r\nexport const rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n});\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n});\r\n/*export let store = createStore(rootReducer, applyMiddleware(thunk));*/\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\nimport {  HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <AppWithRedux />\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}