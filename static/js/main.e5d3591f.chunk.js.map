{"version":3,"sources":["components/AddItemForm/AddItemForm.module.css","App.module.css","serviceWorker.ts","api/tasks-api.ts","components/EditableSpan/EditableSpan.tsx","state/reducers/app-reducer.ts","components/Task/Task.tsx","components/AddItemForm/AddItemForm.tsx","Todolist.tsx","utils/error-utils.ts","api/todolist-api.ts","state/reducers/todolist-reducer.ts","state/reducers/tasks-reducer.ts","components/Snackbar/Snackbar.tsx","state/reducers/auth-reducer.ts","components/Login/Login.tsx","AppWithRedux.tsx","state/store.ts","index.tsx","Todolist.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","EditableSpan","React","memo","props","console","log","useState","edit","setEdit","title","setTitle","onDoubleClick","TextField","id","variant","value","onBlur","updateTitle","autoFocus","onChange","e","currentTarget","instance","axios","create","baseURL","withCredentials","headers","ResultCodes","tasksAPI","todolistId","get","then","res","data","post","taskId","delete","updateTask","description","status","priority","startDate","deadline","put","Task","deleteTaskHandler","useCallback","deleteTask","changeTaskStatusHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","updateTaskTitleHandler","newTitle","updateTaskTitle","className","s","completedTask","IconButton","size","onClick","Delete","fontSize","Checkbox","color","taskTitle","AddItemForm","error","setError","addTaskHandler","trim","addItem","wrapper","label","length","onKeyPress","key","AddBoxOutlined","style","Todolist","changeAllFilterHandler","changeTodolistFilter","changeCompletedFilterHandler","changeActiveFilterHandler","deleteTodoHandler","deleteTodolist","addTask","updateTodoTitleHandler","updateTodoTitle","filteredTasks","tasks","filter","f","todolistTitle","disabled","entityStatus","map","m","Button","btn","slice","createSlice","name","initialState","isInitialize","reducers","toggleIsInitialize","state","action","payload","setRequestStatus","setErrorText","actions","appReducer","reducer","catchErrorHandler","dispatch","err","message","errorHandler","messages","todolistAPI","authAPI","loginParams","email","password","rememberMe","captcha","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","changeTodolistTitleAC","changeTodolistFilterAC","t","newFilter","setTodolistsAC","todolists","setTodolistProgressStatus","todolistsReducer","removeTaskAC","addTaskAC","task","updateTaskAC","todoListId","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","getTasksTC","items","updateTaskTC","updateElemInTask","getState","currTask","find","updateTaskForAPI","resultCode","success","item","catch","Alert","forwardRef","ref","elevation","useStyles","makeStyles","theme","root","width","marginTop","spacing","ErrorSnackbar","useSelector","app","classes","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","isLoggedIn","login","setIsLoggedInAC","setAuthUserData","authReducer","Login","auth","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","to","container","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","AppWithRedux","useEffect","finally","logoutHandler","AppBar","position","background","appbar","Toolbar","edge","Menu","Typography","float","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","TodolistList","todo","deleteTaskTC","changeFilter","filterValue","addTaskTC","removeTodoTC","addTodolist","a","updateTodoTitleTC","Grid","padding","tasksForTodolist","Paper","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5d3591f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"AddItemForm_error__2J-Oc\",\"wrapper\":\"AddItemForm_wrapper__1GGgW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appbar\":\"App_appbar__1EO4s\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport {ResponseType} from \"./todolist-api\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '78ba9efb-88a6-4c7f-b505-5ad3ba5a9466'\r\n    },\r\n})\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskResponseType>\r\n    totalCount: number\r\n    error: null\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskResponseType = {\r\n    id: string\r\n    title: string\r\n    description: string|null\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: null | string\r\n    deadline: null | string\r\n    addedDate: null | string\r\n}\r\nexport type updateTaskType = {\r\n    title: string\r\n    description: string|null\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: null | string\r\n    deadline: null | string\r\n}\r\n\r\n\r\nexport const tasksAPI = {\r\n    GetTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n            .then(res =>{\r\n                return res.data\r\n            })\r\n    },\r\n    CreateTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskResponseType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    DeleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n\r\n    UpdateTask(todolistId: string, taskId: string, updateTask: updateTaskType) {\r\n        let {title, description, status, priority, startDate, deadline} = updateTask\r\n        return instance.put<ResponseType<{ item: TaskResponseType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, {\r\n            title,\r\n            description,\r\n            status,\r\n            priority,\r\n            startDate,\r\n            deadline\r\n        })\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype editableSpanPropsType = {\r\n    title: string\r\n    updateTitle: (newTitle: string) => void\r\n}\r\nexport const EditableSpan = React.memo((props: editableSpanPropsType) => {\r\n    console.log('editableSpan')\r\n    let [edit, setEdit] = useState(true)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const activateInputMode = () => {\r\n        setEdit(false)\r\n\r\n    }\r\n    const activateSpanMode = () => {\r\n        setEdit(true)\r\n        props.updateTitle(title)\r\n    }\r\n    const updateTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    return (\r\n        edit ?\r\n            <span onDoubleClick={activateInputMode}>{title}</span>\r\n            : <TextField id=\"standard-basic\" variant=\"standard\"\r\n                         value={title} onBlur={activateSpanMode} autoFocus onChange={updateTitleHandler}/>\r\n    )\r\n})","import {\r\n    addTodolistAC, changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n    setTodolistStatusType\r\n} from \"./todolist-reducer\";\r\nimport {addTaskAC, removeTaskAC, setTasksAC, updateTaskAC} from \"./tasks-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Nullable} from \"../../type/Nullable\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as Nullable<string>,\r\n    isInitialize: false,\r\n}\r\nexport type appInitialStateType = {\r\n    status: RequestStatusType\r\n    error: Nullable<string>\r\n    isInitialize: boolean\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        toggleIsInitialize(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialize = action.payload.value;\r\n        },\r\n        setRequestStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n\r\n            state.status = action.payload.status;\r\n        },\r\n        setErrorText(state, action: PayloadAction<{ error: Nullable<string> }>) {\r\n            state.error = action.payload.error;\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const {setRequestStatus, toggleIsInitialize, setErrorText} = slice.actions\r\nexport const appReducer = slice.reducer\r\n\r\n\r\nexport type AppActionType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | setTodolistStatusType\r\n\r\nexport type setErrorTextType=ReturnType<typeof setErrorText>\r\nexport type setRequestStatusType=ReturnType<typeof setRequestStatus>\r\n\r\nexport enum ResultCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport s from \"../../Todolist.module.css\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {TaskStatuses} from \"../../api/tasks-api\";\r\n\r\ntype TaskPropsType = {\r\n    taskId: string\r\n    todolistId: string\r\n    status: TaskStatuses\r\n    taskTitle: string\r\n    deleteTask: (todolistId: string, taskId: string) => any\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => any\r\n    updateTaskTitle: (todolistId: string, taskId: string, title: string) => any\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const deleteTaskHandler = useCallback(() => {\r\n        props.deleteTask(props.todolistId, props.taskId)\r\n    }, [props.deleteTask, props.todolistId, props.taskId])\r\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(props.taskId, newIsDoneValue?TaskStatuses.Completed:TaskStatuses.New, props.todolistId)\r\n    }, [props.changeTaskStatus, props.taskId, props.todolistId])\r\n\r\n    const updateTaskTitleHandler = useCallback((newTitle: string) => {\r\n        props.updateTaskTitle(props.todolistId, props.taskId, newTitle)\r\n    }, [props.updateTaskTitle, props.todolistId, props.taskId])\r\n\r\n    return (\r\n        <li className={props.status===TaskStatuses.Completed ? s.completedTask : ''}>\r\n            <IconButton aria-label=\"delete\" size=\"small\" onClick={deleteTaskHandler}>\r\n                <Delete fontSize=\"small\"/>\r\n            </IconButton>\r\n            <Checkbox checked={props.status===TaskStatuses.Completed} onChange={changeTaskStatusHandler}\r\n                      color={\"secondary\"} size=\"small\"/>\r\n            <EditableSpan title={props.taskTitle} updateTitle={updateTaskTitleHandler}/>\r\n        </li>\r\n    )\r\n})\r\n","import s from \"./AddItemForm.module.css\";\r\nimport React, {ChangeEvent, KeyboardEvent,  useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBoxOutlined} from \"@material-ui/icons\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: addItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (e.currentTarget.value.length > 0) {\r\n            setError(null)\r\n        }\r\n    }\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('name required')\r\n        }\r\n    }\r\n\r\n    const onKeyPressAddTaskHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n    console.log('addItem')\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <TextField\r\n                error={!!error}\r\n                id={error ? \"outlined-error\" : \"standard-basic\"}\r\n                label={error ? \"Error\" : \"write title\"}\r\n                onChange={onChangeHandler} onKeyPress={onKeyPressAddTaskHandler}\r\n                value={title}\r\n                size=\"small\"\r\n            />\r\n\r\n            <IconButton size=\"small\" onClick={addTaskHandler}>\r\n                <AddBoxOutlined style={{color: \"LightGreen\"}}/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport s from './Todolist.module.css'\r\n\r\nimport {EditableSpan} from \"./components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./components/Task/Task\";\r\nimport {filterValuesType} from \"./state/reducers/todolist-reducer\";\r\nimport {TaskResponseType, TaskStatuses} from \"./api/tasks-api\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {RequestStatusType} from \"./state/reducers/app-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolistTitle: string\r\n    tasks: Array<TaskResponseType>\r\n    deleteTask: (todolistId: string, taskId: string) => any\r\n    changeTodolistFilter: (filterValue: filterValuesType, todolistId: string) => void\r\n    addTask: (todolistId: string, taskTitle: string) => any\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => any\r\n    filter: filterValuesType\r\n    todolistId: string\r\n    deleteTodolist: (todolistId: string) => any\r\n    updateTaskTitle: (todolistId: string, taskId: string, title: string) => any\r\n    updateTodoTitle: (todolistId: string, newTitle: string) => any\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n\r\n    console.log('todo')\r\n    const changeAllFilterHandler = useCallback(() => {\r\n        props.changeTodolistFilter('all', props.todolistId)\r\n    }, [props.changeTodolistFilter, props.todolistId])\r\n\r\n    const changeCompletedFilterHandler = useCallback(() => {\r\n        props.changeTodolistFilter('completed', props.todolistId)\r\n    }, [props.changeTodolistFilter, props.todolistId])\r\n\r\n    const changeActiveFilterHandler = useCallback(() => {\r\n        props.changeTodolistFilter('active', props.todolistId)\r\n    }, [props.changeTodolistFilter, props.todolistId])\r\n\r\n    const deleteTodoHandler = useCallback(() => {\r\n        props.deleteTodolist(props.todolistId)\r\n    }, [props.deleteTodolist, props.todolistId])\r\n\r\n    const addTaskHandler = useCallback((taskTitle: string) => {\r\n        props.addTask(props.todolistId, taskTitle)\r\n    }, [props.addTask, props.todolistId])\r\n\r\n    const updateTodoTitleHandler = useCallback((newTitle: string) => {\r\n        props.updateTodoTitle(props.todolistId, newTitle)\r\n    }, [props.updateTodoTitle, props.todolistId])\r\n\r\n    let filteredTasks = props.tasks\r\n    if (props.filter === 'completed') {\r\n        filteredTasks = props.tasks.filter(f => f.status === TaskStatuses.Completed)\r\n    }\r\n    if (props.filter === 'active') {\r\n        filteredTasks = props.tasks.filter(f => f.status === TaskStatuses.New)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todolistTitle} updateTitle={updateTodoTitleHandler}/>\r\n                <IconButton aria-label=\"delete\" size=\"small\" onClick={deleteTodoHandler}\r\n                            disabled={props.entityStatus === 'loading'}>\r\n                    <Delete fontSize=\"small\"/>\r\n                </IconButton>\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTaskHandler}/>\r\n            <ul>\r\n                {filteredTasks.map(m => {\r\n                    return <Task deleteTask={props.deleteTask} changeTaskStatus={props.changeTaskStatus}\r\n                                 updateTaskTitle={props.updateTaskTitle}\r\n                                 key={m.id} taskId={m.id} todolistId={props.todolistId} status={m.status}\r\n                                 taskTitle={m.title}/>\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <Button variant=\"text\" size=\"small\"\r\n                        color=\"primary\" onClick={changeAllFilterHandler}\r\n                        className={s.btn}\r\n                >all</Button>\r\n                <Button variant=\"text\" size=\"small\"\r\n                        color=\"primary\" onClick={changeCompletedFilterHandler}\r\n                        className={s.btn}\r\n                >completed</Button>\r\n                <Button variant=\"text\" size=\"small\"\r\n                        color=\"primary\" onClick={changeActiveFilterHandler}\r\n                        className={s.btn}\r\n                >active</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import {setErrorText, setErrorTextType, setRequestStatus, setRequestStatusType} from \"../state/reducers/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\nexport const catchErrorHandler = (dispatch: ErrorUtilsDispatchType, err: any) => {\r\n    dispatch(setErrorText({error: err.message}))\r\n    dispatch(setRequestStatus({status: 'failed'}))\r\n}\r\nexport const errorHandler = <T>(dispatch: ErrorUtilsDispatchType, data: ResponseType<T>) => {\r\n    if (data.messages) {\r\n        dispatch(setErrorText({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setErrorText({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setRequestStatus({status: 'failed'}))\r\n}\r\n\r\n\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<setErrorTextType | setRequestStatusType>;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '78ba9efb-88a6-4c7f-b505-5ad3ba5a9466'\r\n    },\r\n})\r\nexport type TodolistResponseType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport type AuthUserDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nexport const todolistAPI = {\r\n    GetTodolists() {\r\n        return instance.get<Array<TodolistResponseType>>('todo-lists')\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    CreateTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistResponseType }>>('todo-lists', {title})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    DeleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n\r\n    UpdateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n}\r\n\r\nexport type loginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(loginParams: loginParamsType) {\r\n        let {email, password, rememberMe, captcha} = loginParams\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', {email, password, rememberMe, captcha})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n            .then(res => {\r\n                debugger\r\n                return res.data\r\n            })\r\n    },\r\n    getAuthData() {\r\n        return instance.get<ResponseType<AuthUserDataType>>('auth/me')\r\n            .then(res => res.data)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {todolistAPI, TodolistResponseType} from \"../../api/todolist-api\";\r\nimport {RequestStatusType, ResultCodes, setRequestStatus} from \"./app-reducer\";\r\nimport {catchErrorHandler, errorHandler} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {getTasksTC} from \"./tasks-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type todolistsDomainType = TodolistResponseType & { filter: filterValuesType, entityStatus: RequestStatusType }\r\nexport type filterValuesType = \"all\" | \"completed\" | \"active\"\r\n\r\ntype stateType = Array<todolistsDomainType>\r\n\r\nexport type setTodolistStatusType = ReturnType<typeof setTodolistProgressStatus>\r\n\r\n\r\nlet initialState: stateType = []\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            let index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index !== -1) {\r\n                state.splice(index, 1)         //с какого индекса, сколько эл-ов\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistResponseType }>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state) {\r\n            return state\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, newFilter: filterValuesType }>) {\r\n            let index = state.findIndex(t => t.id === action.payload.id)\r\n            state[index] = {...state[index], filter: action.payload.newFilter}\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistResponseType> }>) {\r\n            return action.payload.todolists.map(m => ({...m, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        setTodolistProgressStatus(state, action: PayloadAction<{ entityStatus: RequestStatusType, todolistId: string }>) {\r\n            let index = state.findIndex(t => t.id === action.payload.todolistId)\r\n            state[index] = {...state[index], entityStatus: action.payload.entityStatus}\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    setTodolistsAC,\r\n    setTodolistProgressStatus\r\n} = slice.actions\r\nexport const todolistsReducer = slice.reducer\r\n\r\n\r\n/*type ThunkType = ThunkAction<void, RootReducerType, unknown, AppActionType>*/\r\n\r\nexport const setTodosTC = ()/*:ThunkType*/ => (dispatch: Dispatch) => {\r\n\r\n    dispatch(setRequestStatus({status: 'loading'}))\r\n    todolistAPI.GetTodolists().then((data) => {\r\n        dispatch(setTodolistsAC({todolists: data}))\r\n        dispatch(setRequestStatus({status: 'succeeded'}))\r\n        return data;\r\n    }).then((data) => {\r\n        //@ts-ignore\r\n        data.forEach(todo => dispatch(getTasksTC(todo.id)))\r\n    })\r\n}\r\nexport const removeTodoTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setRequestStatus({status: 'loading'}))\r\n    dispatch(setTodolistProgressStatus({entityStatus: 'loading', todolistId}))\r\n    todolistAPI.DeleteTodolist(todolistId)\r\n        .then((data) => {\r\n            if (data.resultCode === ResultCodes.success) {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setTodolistProgressStatus({entityStatus: 'succeeded', todolistId}))\r\n                dispatch(setRequestStatus({status: 'succeeded'}))\r\n            } else {\r\n                errorHandler(dispatch, data)\r\n                dispatch(setTodolistProgressStatus({entityStatus: 'failed', todolistId}))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            catchErrorHandler(dispatch, err)\r\n        })\r\n}\r\nexport const addTodoTC = (title: string) => (dispatch: Dispatch) => {\r\n\r\n    dispatch(setRequestStatus({status: 'loading'}))\r\n    todolistAPI.CreateTodolist(title)\r\n        .then((data) => {\r\n            if (data.resultCode === ResultCodes.success) {\r\n                dispatch(addTodolistAC({todolist: data.data.item}))\r\n                dispatch(setRequestStatus({status: 'succeeded'}))\r\n            } else {\r\n                errorHandler(dispatch, data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            catchErrorHandler(dispatch, err)\r\n        })\r\n\r\n}\r\nexport const updateTodoTitleTC = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setRequestStatus({status: 'loading'}))\r\n        const data = await todolistAPI.UpdateTodolistTitle(todolistId, title)\r\n\r\n        if (data.resultCode === ResultCodes.success) {\r\n            dispatch(changeTodolistTitleAC())\r\n            dispatch(setRequestStatus({status: 'succeeded'}))\r\n        } else {\r\n            errorHandler(dispatch, data)\r\n        }\r\n    } catch (err) {\r\n        catchErrorHandler(dispatch, err)\r\n    }\r\n}\r\n","import {TaskPriorities, TaskResponseType, tasksAPI, TaskStatuses, updateTaskType} from \"../../api/tasks-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootReducerType} from \"../store\";\r\nimport {ResultCodes, setRequestStatus,} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {catchErrorHandler, errorHandler} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolist-reducer\";\r\nimport { Nullable } from \"../../type/Nullable\";\r\n\r\n\r\nexport type tasksType = {\r\n    [key: string]: Array<TaskResponseType>\r\n}\r\n\r\nlet initialState: tasksType = {\r\n    /* 'todoid1':[{id:string,title:string,description:null,todoListId:string, order:number,status:null|number\r\n    priority:number,startDate:null,deadline:null],\r\n    */\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, id: string }>) {\r\n            let index = state[action.payload.id].findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index !== -1) {\r\n                state[action.payload.id].splice(index, 1)         //с какого индекса, сколько эл-ов\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskResponseType, id: string }>) {\r\n            state[action.payload.id].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ task: TaskResponseType, taskId: string }>) {\r\n            let index = state[action.payload.task.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n            state[action.payload.task.todoListId][index] = {...state[action.payload.task.todoListId][index], ...action.payload.task}\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskResponseType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(f => {\r\n                state[f.id] = []\r\n            })\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\nexport const getTasksTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setRequestStatus({status: 'loading'}))\r\n        tasksAPI.GetTasks(todolistId)\r\n            .then((data) => {\r\n                dispatch(setTasksAC({tasks: data.items, todolistId}))\r\n                dispatch(setRequestStatus({status: 'succeeded'}))\r\n            })\r\n\r\n    }\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setRequestStatus({status: 'loading'}))\r\n        tasksAPI.DeleteTask(todolistId, taskId)\r\n            .then((data) => {\r\n                if (data.resultCode === ResultCodes.success) {\r\n                    dispatch(removeTaskAC({taskId, id: todolistId}))\r\n                    dispatch(setRequestStatus({status: 'succeeded'}))\r\n                } else {\r\n                    errorHandler(dispatch, data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                catchErrorHandler(dispatch, err)\r\n            })\r\n    }\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setRequestStatus({status: 'loading'}))\r\n        tasksAPI.CreateTask(todolistId, title)\r\n            .then((data) => {\r\n                if (data.resultCode === ResultCodes.success) {\r\n                    let task = data.data.item\r\n                    dispatch(addTaskAC({task, id: todolistId}))\r\n                    dispatch(setRequestStatus({status: 'succeeded'}))\r\n                } else {\r\n                    errorHandler(dispatch, data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => catchErrorHandler(dispatch, err))\r\n    }\r\nexport type updateElemInTaskType = {\r\n    title?: string\r\n    description?: Nullable<string>\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: Nullable<string>\r\n    deadline?: Nullable<string>\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, updateElemInTask: updateElemInTaskType) =>\r\n    (dispatch: Dispatch, getState: () => RootReducerType) => {\r\n        let tasks = getState().tasks\r\n        let currTask = tasks[todolistId].find(f => f.id === taskId)\r\n        if (currTask) {\r\n            let updateTask: updateTaskType = {\r\n                title: currTask.title,\r\n                description: currTask.description,\r\n                status: currTask.status,\r\n                priority: currTask.priority,\r\n                startDate: currTask.startDate,\r\n                deadline: currTask.deadline,\r\n            }\r\n            let updateTaskForAPI = {...updateTask, ...updateElemInTask}\r\n            dispatch(setRequestStatus({status: 'loading'}))\r\n            tasksAPI.UpdateTask(todolistId, taskId, updateTaskForAPI)\r\n                .then((data) => {\r\n                    if (data.resultCode === ResultCodes.success) {\r\n                        let task = data.data.item\r\n                        dispatch(updateTaskAC({task, taskId}))\r\n                        dispatch(setRequestStatus({status: 'succeeded'}))\r\n                    } else {\r\n                        errorHandler(dispatch, data)\r\n                    }\r\n                })\r\n                .catch((err: AxiosError) => catchErrorHandler(dispatch, err))\r\n        }\r\n    }\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../state/store\";\r\nimport {setErrorText} from \"../../state/reducers/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useSelector<RootReducerType, string | null>(state => state.app.error)\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorText({error:null}))\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error} &#128557;\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import {Dispatch} from 'redux'\r\nimport { ResultCodes, setRequestStatus, toggleIsInitialize} from \"./app-reducer\";\r\nimport {authAPI, AuthUserDataType, loginParamsType} from \"../../api/todolist-api\";\r\nimport {catchErrorHandler, errorHandler} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Nullable} from \"../../type/Nullable\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    data:{\r\n    id:null as Nullable<number>,\r\n    login:null as Nullable<string>,\r\n    email:null as Nullable<string>,\r\n}}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        },\r\n        setAuthUserData(state, action: PayloadAction<{ data:AuthUserDataType }>) {\r\n            state.data=action.payload.data\r\n        },\r\n\r\n    }})\r\n\r\nexport const {setIsLoggedInAC,setAuthUserData}=slice.actions\r\nexport const authReducer = slice.reducer\r\n\r\n\r\nexport const loginTC = (data: loginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setRequestStatus({status:'loading'}))\r\n    authAPI.login(data).then((data) => {\r\n        if (data.resultCode === ResultCodes.success) {\r\n            dispatch(setIsLoggedInAC({value:true}))\r\n            dispatch(setRequestStatus({status:'succeeded'}))\r\n        } else {\r\n            errorHandler(dispatch, data)\r\n        }\r\n    })\r\n        .catch((err: AxiosError) => catchErrorHandler(dispatch, err))\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setRequestStatus({status:'loading'}))\r\n    authAPI.logout().then((data) => {\r\n        if (data.resultCode === ResultCodes.success) {\r\n            dispatch(setIsLoggedInAC({value:false}))\r\n            dispatch(setRequestStatus({status:'succeeded'}))\r\n        } else {\r\n            errorHandler(dispatch, data)\r\n        }\r\n    })\r\n        .catch((err: AxiosError) => catchErrorHandler(dispatch, err))\r\n}\r\n\r\n\r\nexport const authUserTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setRequestStatus({status:'loading'}))\r\n    authAPI.getAuthData().then((data) => {\r\n        if (data.resultCode === ResultCodes.success) {\r\n            dispatch(setIsLoggedInAC({value:true}))\r\n            dispatch(setRequestStatus({status:'succeeded'}))\r\n        } else {\r\n            errorHandler(dispatch, data)\r\n        }\r\n    })\r\n        .catch((err: AxiosError) => catchErrorHandler(dispatch, err))\r\n        .finally(()=>dispatch(toggleIsInitialize({value:true})))\r\n}\r\n// types\r\n\r\n","import Grid from '@material-ui/core/Grid/Grid'\r\nimport React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {authAPI} from \"../../api/todolist-api\";\r\nimport {loginTC} from \"../../state/reducers/auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../state/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<RootReducerType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            }\r\n            if (values.password.length < 3) {\r\n                errors.password = 'Min password length is 3 symbols'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            authAPI.login(values)\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\" {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          checked={formik.values.rememberMe}\r\n                                          control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {\r\n    AppBar, Button,\r\n    CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport s from './App.module.css'\r\nimport {\r\n    addTaskTC,\r\n    deleteTaskTC, tasksType, updateTaskTC\r\n} from \"./state/reducers/tasks-reducer\";\r\nimport {\r\n    addTodoTC,\r\n    changeTodolistFilterAC, filterValuesType,\r\n    removeTodoTC, setTodosTC, todolistsDomainType, updateTodoTitleTC,\r\n\r\n} from \"./state/reducers/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./state/store\";\r\nimport {TaskStatuses} from \"./api/tasks-api\";\r\nimport {RequestStatusType} from \"./state/reducers/app-reducer\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport ErrorSnackbar from \"./components/Snackbar/Snackbar\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {authUserTC, logoutTC} from \"./state/reducers/auth-reducer\";\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authUserTC())\r\n    }, [])\r\n\r\n    const status = useSelector<RootReducerType, RequestStatusType>(state => state.app.status)\r\n    const isInitialize = useSelector<RootReducerType, boolean>(state => state.app.isInitialize)\r\n    const isLoggedIn = useSelector<RootReducerType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logoutHandler = useCallback(function () {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n\r\nreturn (\r\n    <div>\r\n        <AppBar position=\"static\" style={{background: \"SkyBlue\"}} className={s.appbar}>\r\n            <Toolbar variant=\"dense\">\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    Todolist\r\n                </Typography>\r\n                {isLoggedIn && <Button onClick={logoutHandler}  color={'inherit'} style={{float:'right'}}>log out</Button>}\r\n            </Toolbar>\r\n        </AppBar>\r\n        {status === 'loading' && <LinearProgress/>}\r\n        {!isInitialize ? <div\r\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n            :\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistList/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/> //красивый url\r\n                    <Route path={'/404'} element={<h1>404: Page not found</h1>}/>\r\n                </Routes>\r\n            </Container>}\r\n        <ErrorSnackbar/>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\nexport const TodolistList = () => {\r\n\r\n    const isLoggedIn = useSelector<RootReducerType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<RootReducerType, Array<todolistsDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<RootReducerType, tasksType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(setTodosTC())\r\n    }, [])\r\n    const deleteTask = useCallback(function (todolistId: string, taskId: string) {\r\n        dispatch(deleteTaskTC(todolistId, taskId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (filterValue: filterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId, newFilter:filterValue})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (todolistId: string, taskTitle: string) {\r\n        dispatch(addTaskTC(todolistId, taskTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}))\r\n    }, [dispatch])\r\n\r\n    const deleteTodolist = useCallback(function (todolistId: string) {\r\n        dispatch(removeTodoTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback(function (todolistTitle: string) {\r\n        dispatch(addTodoTC(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    const updateTaskTitle = useCallback(function (todolistId: string, taskId: string, title: string) {\r\n        dispatch(updateTaskTC(todolistId, taskId, {title}))\r\n    }, [dispatch])\r\n\r\n    const updateTodoTitle = useCallback(function (todolistId: string, newTitle: string) {\r\n        dispatch(updateTodoTitleTC(todolistId, newTitle))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n\r\n                {todolists.map(m => {\r\n                    let tasksForTodolist = tasks[m.id]\r\n                    return (<Grid item key={m.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist key={m.id}\r\n                                          todolistId={m.id}\r\n                                          entityStatus={m.entityStatus}\r\n                                          todolistTitle={m.title}\r\n                                          tasks={tasksForTodolist}\r\n                                          deleteTask={deleteTask}\r\n                                          changeTodolistFilter={changeFilter}\r\n                                          addTask={addTask}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n                                          filter={m.filter}\r\n                                          deleteTodolist={deleteTodolist}\r\n                                          updateTaskTitle={updateTaskTitle}\r\n                                          updateTodoTitle={updateTodoTitle}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import { combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"./reducers/tasks-reducer\";\r\n\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {authReducer} from \"./reducers/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {todolistsReducer} from \"./reducers/todolist-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n});\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunk)\r\n})\r\n/*export let store = createStore(rootReducer, applyMiddleware(thunk));*/\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n     <Provider store={store}>\r\n             <BrowserRouter>\r\n                     <AppWithRedux /> </BrowserRouter> </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedTask\":\"Todolist_completedTask__1tiHp\"};"],"sourceRoot":""}